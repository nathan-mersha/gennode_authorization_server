{
  "stats": {
    "suites": 51,
    "tests": 115,
    "passes": 115,
    "pending": 0,
    "failures": 0,
    "start": "2019-10-20T10:17:52.621Z",
    "end": "2019-10-20T10:17:58.068Z",
    "duration": 5447,
    "testsRegistered": 115,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "94302e14-8894-4451-b92e-6959383fdd79",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "44d97fc4-4028-4065-a59f-33297ca3ba4b",
        "title": "Token",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "19dad467-0f32-44ec-a65b-0b359cef6102",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to create token (Validation error)",
                "fullTitle": "Token Create Should fail to create token (Validation error)",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.create(),'post',dummyData.token.create.validationError,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "acde6162-b890-4a85-b186-673e94f4f659",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully create token",
                "fullTitle": "Token Create Should successfully create token",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.create(),'post',dummyData.token.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isToken(body, true);\n    dummyData.token.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8046dcb8-4efd-4a90-bf04-ecd6c8e448a1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "acde6162-b890-4a85-b186-673e94f4f659",
              "8046dcb8-4efd-4a90-bf04-ecd6c8e448a1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 119,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "1e60321d-fe57-474e-9251-c00e48bd6349",
            "title": "Validate",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Token Validate \"before all\" hook",
                "timedOut": false,
                "duration": 94,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "console.log(\"Generating dummy data for tests.\");\nasync.waterfall([\n    requestToken,\n    updateAnyRole, // route to be accessed by all\n    updateAnyACM,\n    createUserRole,\n    createUserACM\n],function () {\n    done();\n});\n/**\n * @name            - Request token\n * @description     - Requests a new token by userId.\n * @param callback  - Callback function (error)\n */\nfunction requestToken(callback) {\n    sendRequest(url.token.create(),'post',{userId : userId},201,function (err,res) {\n        validateToken.allowedToBeAccessedByAny.token = res.body.token;\n        validateToken.allowedToBeAccessedByNone.token = res.body.token;\n        validateToken.allowedToPerformPUTByAny.token = res.body.token;\n        validateToken.deniedToPerformDELETEByAny.token = res.body.token;\n        validateToken.allowedToPerformPUTByUser.token = res.body.token;\n        validateToken.allowedToPerformPUTByUserOnUserRoute.token = res.body.token;\n        validateToken.allowedToPerformMethodDeniedRoute.token = res.body.token;\n        validateToken.deniedMethodOnObject.token = res.body.token;\n        validateToken.allowedToAccessRoute.token = res.body.token;\n        validateToken.notAllowedToAccessRoute.token = res.body.token;\n        validateToken.notAllowedToAccessMethodButRoute.token = res.body.token;\n        callback(null);\n    });\n}\n/**\n * @name            - Update any role\n * @description     - Updates role type 'any' to have access for the routes accessed by all\n * @param callback  - Callback function (error)\n */\nfunction updateAnyRole(callback) {\n    let updateData  = {accessRoutes : [\n            { route : route.accessedByAll, method : \"POST\"},\n            { route : route.accessedByAll, method : \"PUT\"},\n            { route : route.accessedByAll, method : \"GET\"}\n            ]};\n    sendRequest(url.role.update(\"name=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){callback(null);}\n    });\n}\n/**\n * @name            - Update any acm\n * @description     - Updates any acm role\n * @param callback  - Callback function (error)\n */\nfunction updateAnyACM(callback) {\n    let updateData = {\n        accessControl : {\n            read    : [performPUTOnObjectByAny],\n            update  : [performPUTOnObjectByAny]\n        }\n    };\n    sendRequest(url.acm.update(\"subject=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){callback(null);}\n    });\n}\n/**\n * @name            - Create user role\n * @description     - Create sample role with test user\n * @param callback  - Callback function (error)\n */\nfunction createUserRole(callback) {\n    let sampleRole = {\n        name            : \"Sample Privilege\",\n        description     : \"Sample description for the privilege\",\n        members         : [userId],\n        accessRoutes    : [\n            {route : route.accessedByUser, method : \"PUT\"}\n        ]\n    };\n    sendRequest(url.role.create(),'post',sampleRole,201,function (err,res) {\n        let body = res.body;\n        if(body._id){callback(null);}\n    });\n}\n/**\n * @name            - Create user acm\n * @description     - Creates custom user acm data.\n * @param callback  - Callback function (error)\n */\nfunction createUserACM(callback) {\n    let userACMData = {\n        subject : userId,\n        accessControl : {\n            update : [performPUTOnObjectByUser]\n        }\n    };\n    sendRequest(url.acm.create(),'post',userACMData,200,function (err,res) {\n        let body = res.body;\n        if(body._id){callback(null);}\n    });\n}",
                "err": {},
                "isRoot": false,
                "uuid": "dde50630-885c-4762-9a49-2a815cf8a541",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Token Validate \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "// Roll back\nasync.waterfall([\n    removedAnyRoleUpdate,\n    removeAnyACMUpdate,\n    removeUserRole,\n    removeUserACM\n],function () {\n    console.log(\"Rollback completed.\")\n});\nfunction removedAnyRoleUpdate(cb) {\n    let updateData  = {accessRoutes : []};\n    sendRequest(url.role.update(\"name=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){cb(null);}\n    });\n}\nfunction removeAnyACMUpdate(cb) {\n    let updateData = {\n        accessControl : {\n            read    : [],\n            update  : []\n        }\n    };\n    sendRequest(url.acm.update(\"subject=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){cb(null);}\n    });\n}\nfunction removeUserRole(cb) {\n    let userRoleQuery = \"name=Sample Privilege\";\n    sendRequest(url.role.remove(userRoleQuery),'delete',null, 200, function (err, res) {\n        if(res.body.ok){cb(null);}\n    });\n}\nfunction removeUserACM(cb) {\n    let userACMQuery = `subject=${userId}`;\n    sendRequest(url.acm.remove(userACMQuery),'delete',null, 200, function (err, res) {\n        if(res.body.ok){cb(null);}\n    });\n}",
                "err": {},
                "isRoot": false,
                "uuid": "c0929e94-22f9-4795-8e9c-ca2b7563338c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should fail to grant access (Body missing required fields)",
                "fullTitle": "Token Validate Should fail to grant access (Body missing required fields)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.missingRequiredFields,400,function (err,res) {\n    let body = res.body;\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode); // Validation error\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fc7e93fe-171e-4cc9-bd06-183c05e225f2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (Route is allowed to be accessed by anyone)",
                "fullTitle": "Token Validate Should successfully grant access (Route is allowed to be accessed by anyone)",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToBeAccessedByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "39466724-3a32-4abe-8413-bfb7b291f271",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (Token has expired)",
                "fullTitle": "Token Validate Should fail to grant access (Token has expired)",
                "timedOut": false,
                "duration": 2046,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let tokenExpirationTimeCopy = process.env.TOKEN_EXPIRATION_TIME;\nprocess.env.TOKEN_EXPIRATION_TIME = \"1000\"; // Change token expiration time to one second.\nasync.waterfall([\n    createAToken,\n    validateExpToken,\n    rollBackExpirationTime\n],function () {\n    done();\n});\n/**\n * @name            - Create token\n * @description     - Creates a new token for user by 1sec expiration time\n * @param cb        - Callback function (error, response)\n */\nfunction createAToken(cb) {\n    sendRequest(url.token.create(),'post',{userId : userId},201,function (err,res) { // Create token\n        cb(null, res);\n    });\n}\n/**\n * @name            - Validate Exp token\n * @description     - Validation an expired token after 2sec (1 sec safe threshold)\n * @param res       - Token data response object\n * @param cb        - Callback function (error)\n */\nfunction validateExpToken(res, cb) {\n    validateToken.toExpireAfterOneSec.token = res.body.token;\n    setTimeout(function () {\n        sendRequest(url.token.validate(),'post',validateToken.toExpireAfterOneSec,401,function (err,res) {\n            let body = res.body;\n            expect(body.message).to.equal(message.ACCESS_DENIED);\n            cb(null);\n        });\n    },2000);\n}\n/**\n * @name            - Roll back expiration time\n * @description     - Rolls back expiration time to whatever was set on the process env before the test.\n * @param cb        - Callback function (error)\n */\nfunction rollBackExpirationTime(cb) {\n    process.env.TOKEN_EXPIRATION_TIME = tokenExpirationTimeCopy;\n    cb(null);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "683e6638-b21e-41c0-a088-e75d36be9ae3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (Group 'any' is allowed to perform operation on object)",
                "fullTitle": "Token Validate Should successfully grant access (Group 'any' is allowed to perform operation on object)",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "67a5c34c-72ca-466e-a214-8c604c33cc3d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully deny access (Group 'any' is not allowed to perform operation on object)",
                "fullTitle": "Token Validate Should successfully deny access (Group 'any' is not allowed to perform operation on object)",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.deniedToPerformDELETEByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e77c4d51-12c7-48cc-85e4-b9ad3c479291",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to perform method on object, with all access of route)",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to perform method on object, with all access of route)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByUser,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d71035c4-8a52-4665-9dd0-f8b5444f8250",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to perform method on object, with only user access route)",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to perform method on object, with only user access route)",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByUserOnUserRoute,200,function (err,res) {\n                        let body = res.body;\n                        expect(body.message).to.equal(message.ACCESS_GRANTED);\n                        done();\n                    });",
                "err": {},
                "isRoot": false,
                "uuid": "7da0dff7-1824-46dd-9847-28bfe4e1564d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to access route+method, no object access (RUD) is requested )",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to access route+method, no object access (RUD) is requested )",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToAccessRoute,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "993fbc5c-79b7-4d62-bf16-6b3a4de13ee5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User is not allowed to access route+method) ",
                "fullTitle": "Token Validate Should fail to grant access (User is not allowed to access route+method) ",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.notAllowedToAccessRoute,400,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "99c45408-3202-4740-a439-e10ddb82bc5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User is not allowed to access method but route)",
                "fullTitle": "Token Validate Should fail to grant access (User is not allowed to access method but route)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.notAllowedToAccessMethodButRoute,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b97d5841-ebf0-4191-ad39-f562e2eedd50",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User allowed to perform method on object and denied route.)",
                "fullTitle": "Token Validate Should fail to grant access (User allowed to perform method on object and denied route.)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformMethodDeniedRoute,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "279500ab-7425-4ffa-b1df-e341457c0f95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User or 'any' group is denied to perform method on object)",
                "fullTitle": "Token Validate Should fail to grant access (User or 'any' group is denied to perform method on object)",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.deniedMethodOnObject,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "df68a740-107e-43bb-8ec8-deeee4bdc488",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fc7e93fe-171e-4cc9-bd06-183c05e225f2",
              "39466724-3a32-4abe-8413-bfb7b291f271",
              "683e6638-b21e-41c0-a088-e75d36be9ae3",
              "67a5c34c-72ca-466e-a214-8c604c33cc3d",
              "e77c4d51-12c7-48cc-85e4-b9ad3c479291",
              "d71035c4-8a52-4665-9dd0-f8b5444f8250",
              "7da0dff7-1824-46dd-9847-28bfe4e1564d",
              "993fbc5c-79b7-4d62-bf16-6b3a4de13ee5",
              "99c45408-3202-4740-a439-e10ddb82bc5d",
              "b97d5841-ebf0-4191-ad39-f562e2eedd50",
              "279500ab-7425-4ffa-b1df-e341457c0f95",
              "df68a740-107e-43bb-8ec8-deeee4bdc488"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2264,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "63f4a9f8-78d2-4b51-8036-c173b9ab98ad",
        "title": "Service",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1b066f9f-148b-4904-b351-1051437de903",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create service",
                "fullTitle": "Service Create Should successfully create service",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body, true);\n    dummyData.service.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "59ace04f-51b8-4377-8ba5-6d9278d3bef8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create service (Method and route fields missing)",
                "fullTitle": "Service Create Should fail to create service (Method and route fields missing)",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "41de01bd-c3db-4481-bdbb-10a003058688",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create service (Method is not http method)",
                "fullTitle": "Service Create Should fail to create service (Method is not http method)",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "64844f95-c400-4681-a85c-157d290e1c98",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "59ace04f-51b8-4377-8ba5-6d9278d3bef8",
              "41de01bd-c3db-4481-bdbb-10a003058688",
              "64844f95-c400-4681-a85c-157d290e1c98"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 62,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "422a8130-8a51-466e-9a2d-bdaad3065690",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve service data (public)",
                "fullTitle": "Service Find Should successfully retrieve service data (public)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPublic(dummyData.service.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.service.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "13dbd14c-5fd4-4b53-bc47-9af99729fb78",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve service data (private)",
                "fullTitle": "Service Find Should successfully retrieve service data (private)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPrivate(dummyData.service.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.service.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "93cba9ec-107d-446b-a7df-5876f056d4f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve service data ( Id wrong format )",
                "fullTitle": "Service Find Should fail to retrieve service data ( Id wrong format )",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPublic(dummyData.service.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1c6d37ef-1251-4415-8b6c-c431372a8a55",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "13dbd14c-5fd4-4b53-bc47-9af99729fb78",
              "93cba9ec-107d-446b-a7df-5876f056d4f3",
              "1c6d37ef-1251-4415-8b6c-c431372a8a55"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "af607d02-8ce0-4d8c-ab33-8ab09f70e8c7",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve service paginated data",
                "fullTitle": "Service Find paginated Should successfully retrieve service paginated data",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e161868a-d62b-4c40-a1d0-97191c250e7b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e161868a-d62b-4c40-a1d0-97191c250e7b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "58ddf8fe-2691-40c7-9497-9725acae457e",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Service Count Should successfully return a count value",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "afeb9fea-398e-4d7f-89ba-1166125fd552",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "afeb9fea-398e-4d7f-89ba-1166125fd552"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d68a03f6-0b44-42ea-8a46-895b173fe6e8",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Service Update \"before all\" hook",
                "timedOut": false,
                "duration": 13,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body, true);\n    serviceData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "02cb71e8-2652-4c69-83be-6485419b45a1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Service Update \"after all\" hook",
                "timedOut": false,
                "duration": 22,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}`;\nsendRequest(url.service.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1e110a56-f2ab-451c-8439-beb5b268861e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update service data",
                "fullTitle": "Service Update Should successfully update service data",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.update(query),'put',dummyData.service.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "75eacf2c-e104-4923-af8f-fdc46b24ef28",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "Service Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.service.update(query),'put',dummyData.service.update.success,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0cfdeee6-1c0a-4d5c-bdd0-f8b21d42dfec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update service data (Invalid update data)",
                "fullTitle": "Service Update Should fail to update service data (Invalid update data)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.update(query),'put',dummyData.service.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "68385c28-b4ed-4b9c-9dc2-7c4b4360f132",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Service Update Should successfully push items to target",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).excluding('_id').to.include(... update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7504060a-0c0b-4970-b30a-4756fb5487a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Service Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).excluding('_id').to.include(...update.success.data);\n    let responseArray = body.routes;\n    helper.removeChildFromParent(responseArray, update.success.data);\n    expect(responseArray).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fc6f4994-0473-4fac-b6b9-a5411e5bc9cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Service Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b8acf62b-1c5d-4695-a85f-379250930227",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Service Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "13934586-a0be-48ed-b6f3-3968434374ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Service Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=notFound&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "27fd04e7-be60-4895-b87d-60707415e453",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Service Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=notFound&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "625693ed-6414-48f0-970f-ac0958838741",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Service Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dd21a02e-b754-4e16-b95f-fba94f588743",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "75eacf2c-e104-4923-af8f-fdc46b24ef28",
              "0cfdeee6-1c0a-4d5c-bdd0-f8b21d42dfec",
              "68385c28-b4ed-4b9c-9dc2-7c4b4360f132",
              "7504060a-0c0b-4970-b30a-4756fb5487a5",
              "fc6f4994-0473-4fac-b6b9-a5411e5bc9cb",
              "b8acf62b-1c5d-4695-a85f-379250930227",
              "13934586-a0be-48ed-b6f3-3968434374ef",
              "27fd04e7-be60-4895-b87d-60707415e453",
              "625693ed-6414-48f0-970f-ac0958838741",
              "dd21a02e-b754-4e16-b95f-fba94f588743"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 116,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "df89e7f8-1346-4499-bd25-b1b58aab116b",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove service data",
                "fullTitle": "Service Remove Should successfully remove service data",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d19725f3-9ccb-4618-a99a-6490631198f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove service data. (Query not provided)",
                "fullTitle": "Service Remove Should fail to remove service data. (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.service.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b44180c4-6dae-4a7c-a243-067bfb5e3171",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d19725f3-9ccb-4618-a99a-6490631198f4",
              "b44180c4-6dae-4a7c-a243-067bfb5e3171"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f5a822ea-f23d-4ce7-a36d-4d2640f8edb5",
        "title": "User",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "486b0d81-70a7-4f01-a941-8ca38dc2b02b",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create user",
                "fullTitle": "User Create Should successfully create user",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.create(),'post',dummyData.user.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUser(body, true);\n    dummyData.user.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a4b5a8e8-8cdc-415e-9fce-efcd94e0bb85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create user (Required field missing)",
                "fullTitle": "User Create Should fail to create user (Required field missing)",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.create(),'post',dummyData.user.create.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "621a932b-ede7-44f6-9c2d-be8f051cf7d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a4b5a8e8-8cdc-415e-9fce-efcd94e0bb85",
              "621a932b-ede7-44f6-9c2d-be8f051cf7d5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 53,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ce8af284-7b4d-4e9f-b1f8-4a8c66e36f93",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user data (public)",
                "fullTitle": "User Find Should successfully retrieve user data (public)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPublic(dummyData.user.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.user.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c437e18c-4bf7-43d4-8f8a-c459a2e8d5ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve user data (private)",
                "fullTitle": "User Find Should successfully retrieve user data (private)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPrivate(dummyData.user.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.user.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6d34e912-ee10-4efa-89ec-d761ef507b74",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve user data ( Id wrong format )",
                "fullTitle": "User Find Should fail to retrieve user data ( Id wrong format )",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPublic(dummyData.user.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1d0bf394-e260-45be-a19d-80486013a534",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c437e18c-4bf7-43d4-8f8a-c459a2e8d5ff",
              "6d34e912-ee10-4efa-89ec-d761ef507b74",
              "1d0bf394-e260-45be-a19d-80486013a534"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "52ae3aa8-59e0-41d8-b87a-14195d380dfc",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user paginated data",
                "fullTitle": "User Find paginated Should successfully retrieve user paginated data",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6a115474-02bd-458e-9f83-63f35cf2dd8b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a115474-02bd-458e-9f83-63f35cf2dd8b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f232ed60-111a-4b76-9de6-14a5255f4fdd",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "User Count Should successfully return a count value",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "40e0584b-2907-46ec-8291-a4cdd8808905",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "40e0584b-2907-46ec-8291-a4cdd8808905"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "712655a8-6fe2-4b2a-a3ac-130017689a20",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update user data",
                "fullTitle": "User Update Should successfully update user data",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.update(query),'put',dummyData.user.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "be96e45d-21fc-49da-a5de-a53ccea4174b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "User Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.user.update(query),'put',dummyData.user.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "435aa4d7-307d-4918-8c7b-b2ec1e4e8468",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update user data (Invalid update data)",
                "fullTitle": "User Update Should fail to update user data (Invalid update data)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.update(query),'put',dummyData.user.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a92421d8-f5e3-436c-8bb0-6244c7ef59bc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "be96e45d-21fc-49da-a5de-a53ccea4174b",
              "435aa4d7-307d-4918-8c7b-b2ec1e4e8468",
              "a92421d8-f5e3-436c-8bb0-6244c7ef59bc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "dadb280a-6273-4fc4-a69c-bcf8e7a6474b",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove user data",
                "fullTitle": "User Remove Should successfully remove user data",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0408b80e-39a1-4045-b308-ea65c1d5ed5e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove user data. (Query not provided)",
                "fullTitle": "User Remove Should fail to remove user data. (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.user.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "56a9e9f5-da6b-4bc0-ae41-f32242bae6b6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0408b80e-39a1-4045-b308-ea65c1d5ed5e",
              "56a9e9f5-da6b-4bc0-ae41-f32242bae6b6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e0456097-1c27-4e02-88a8-6316df0cc7bb",
        "title": "Role",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "13ed7803-ed74-4207-94db-cdb49512f3e2",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create role",
                "fullTitle": "Role Create Should successfully create role",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    dummyData.role.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "44fd2b13-e5eb-49ce-9062-2d7d2a39728e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create role (Required field missing)",
                "fullTitle": "Role Create Should fail to create role (Required field missing)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.missingRequiredFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5ee93b75-e260-4290-ba57-3ef587efa5f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create route (Unknown Http method)",
                "fullTitle": "Role Create Should fail to create route (Unknown Http method)",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.invalidMethod,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5c939cfd-1289-4e42-bdaa-4db4b1537e66",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "44fd2b13-e5eb-49ce-9062-2d7d2a39728e",
              "5ee93b75-e260-4290-ba57-3ef587efa5f8",
              "5c939cfd-1289-4e42-bdaa-4db4b1537e66"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 41,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "73c0064b-f611-4170-bfb7-9724ed84d9cd",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve role data (public)",
                "fullTitle": "Role Find Should successfully retrieve role data (public)",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPublic(dummyData.role.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.role.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fe108651-b46d-4fc9-bef2-dd3577e2b7a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve role data (private)",
                "fullTitle": "Role Find Should successfully retrieve role data (private)",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPrivate(dummyData.role.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.role.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e6e23183-494c-4152-9459-cdbc813858dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve role data ( Id wrong format )",
                "fullTitle": "Role Find Should fail to retrieve role data ( Id wrong format )",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPublic(dummyData.role.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3fac7361-d70f-4db0-b7e3-08c9273bb5b7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fe108651-b46d-4fc9-bef2-dd3577e2b7a4",
              "e6e23183-494c-4152-9459-cdbc813858dc",
              "3fac7361-d70f-4db0-b7e3-08c9273bb5b7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 34,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "180b6420-0dfa-474b-a61d-59a3a904926e",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve role paginated data",
                "fullTitle": "Role Find paginated Should successfully retrieve role paginated data",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6817f1df-9896-4ab4-b333-7926f3f0950a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6817f1df-9896-4ab4-b333-7926f3f0950a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 31,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "20e9625e-ff4b-4777-9b8c-848fbcb513d5",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Role Count Should successfully return a count value",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f7a51ee1-c18d-42f2-be16-60a885204697",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f7a51ee1-c18d-42f2-be16-60a885204697"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "05ba69b0-42f7-4884-9995-b68b02be9972",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Role Update \"before all\" hook",
                "timedOut": false,
                "duration": 17,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    roleData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "424eca09-a38b-4c1d-9c74-2ece98c9b444",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Role Update \"after all\" hook",
                "timedOut": false,
                "duration": 6,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}`;\nsendRequest(url.role.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "17c5949d-bfa9-4c2e-94e6-bd3673a45be0",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update role data",
                "fullTitle": "Role Update Should successfully update role data",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.update(query),'put',dummyData.role.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "578a9ae6-6131-410c-9658-bbd83c1b9a37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update role data (Query not provided)",
                "fullTitle": "Role Update Should fail to update role data (Query not provided)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.role.update(query),'put',dummyData.role.update.success,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "71b579aa-c378-4665-be49-0cc5e0d3613d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update role data (Invalid update data)",
                "fullTitle": "Role Update Should fail to update role data (Invalid update data)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.update(query),'put',dummyData.role.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d629ce7c-7881-45cc-9212-ac1b1cfed03b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Role Update Should successfully push items to target",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    (function () {\n        body.accessRoutes.forEach(function (accessRoute) {\n            delete accessRoute._id;\n        })\n    })();\n    expect(body.accessRoutes).to.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5b44722d-0d3b-4578-b078-f698a4e08941",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Role Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    (function () {\n        body.accessRoutes.forEach(function (accessRoute) {\n            delete accessRoute._id;\n        })\n    })();\n    expect(body.accessRoutes).to.include(...update.success.data);\n    let responseArray = body.accessRoutes;\n    helper.removeChildFromParent(responseArray, update.success.data);\n    expect(responseArray).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ae42f252-7c9b-4a8a-9ceb-b44d0935b17a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Role Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    expect(body.accessRoutes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bb86c4e6-1c1a-4364-995e-e91bdbdbc812",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Role Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    expect(body.accessRoutes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "de9a07fd-a5b5-42af-a28c-54006b383860",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Role Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=notFound&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "417c5b64-e55d-4f2a-aa51-109355d0b784",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Role Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=notFound&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f76cdb82-0b0e-45d1-9bf2-59042b3b6ea3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Role Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dea161d1-a61e-44a6-b774-c8ff585d182a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "578a9ae6-6131-410c-9658-bbd83c1b9a37",
              "71b579aa-c378-4665-be49-0cc5e0d3613d",
              "d629ce7c-7881-45cc-9212-ac1b1cfed03b",
              "5b44722d-0d3b-4578-b078-f698a4e08941",
              "ae42f252-7c9b-4a8a-9ceb-b44d0935b17a",
              "bb86c4e6-1c1a-4364-995e-e91bdbdbc812",
              "de9a07fd-a5b5-42af-a28c-54006b383860",
              "417c5b64-e55d-4f2a-aa51-109355d0b784",
              "f76cdb82-0b0e-45d1-9bf2-59042b3b6ea3",
              "dea161d1-a61e-44a6-b774-c8ff585d182a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 130,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "e451b411-183f-4d96-9142-499f8f6d848b",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove role data",
                "fullTitle": "Role Remove Should successfully remove role data",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1286e565-9f7d-4087-b457-feab92f1b943",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove role data (Query not provided)",
                "fullTitle": "Role Remove Should fail to remove role data (Query not provided)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.role.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6fc13f2c-7490-4f91-a52f-2d5a357bcd25",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1286e565-9f7d-4087-b457-feab92f1b943",
              "6fc13f2c-7490-4f91-a52f-2d5a357bcd25"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b7a13710-d06a-4611-95bf-605ec47da616",
        "title": "Acm",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ac0d3b61-a920-4115-be69-8a0bc7f02684",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create acm",
                "fullTitle": "Acm Create Should successfully create acm",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true);\n    dummyData.acm.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "aeb49d3b-902f-4d5e-90f0-ff0dcb6ab2a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully create acm (By Object)",
                "fullTitle": "Acm Create Should successfully create acm (By Object)",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(\"object\"),'post',dummyData.acm.create.successByObject,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true, \"object\");\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "16261e90-5d51-4ca8-b3d6-af4a4a121c0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create acm (Required field missing)",
                "fullTitle": "Acm Create Should fail to create acm (Required field missing)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2b39492a-e4b2-41e7-a0c8-3c4e1d4226f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create acm (Required field missing, By Object)",
                "fullTitle": "Acm Create Should fail to create acm (Required field missing, By Object)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(\"object\"),'post',dummyData.acm.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2f6bc576-3379-4f0e-b928-5aaa0ada7fcb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "aeb49d3b-902f-4d5e-90f0-ff0dcb6ab2a4",
              "16261e90-5d51-4ca8-b3d6-af4a4a121c0d",
              "2b39492a-e4b2-41e7-a0c8-3c4e1d4226f4",
              "2f6bc576-3379-4f0e-b928-5aaa0ada7fcb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 131,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f60cd30d-b264-449f-8fd5-e65f4d221b56",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve acm data (public)",
                "fullTitle": "Acm Find Should successfully retrieve acm data (public)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPublic(dummyData.acm.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.acm.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9f5c1208-66be-448c-9c63-e7ec1563a722",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve acm data (private)",
                "fullTitle": "Acm Find Should successfully retrieve acm data (private)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPrivate(dummyData.acm.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.acm.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "aa72d8b5-1a7a-45d3-a5c8-f85bc54e51fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve acm data ( Id wrong format )",
                "fullTitle": "Acm Find Should fail to retrieve acm data ( Id wrong format )",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPublic(dummyData.acm.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "02ec9e8f-532e-48cf-a4d3-91fe98fcc01d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9f5c1208-66be-448c-9c63-e7ec1563a722",
              "aa72d8b5-1a7a-45d3-a5c8-f85bc54e51fe",
              "02ec9e8f-532e-48cf-a4d3-91fe98fcc01d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 50,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "05689c97-f8d3-4ccf-88fe-af54ceeb1265",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve acm paginated data",
                "fullTitle": "Acm Find paginated Should successfully retrieve acm paginated data",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "30ade9f1-af59-4352-a6f8-7fb2ec517848",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "30ade9f1-af59-4352-a6f8-7fb2ec517848"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fa24b031-bb4b-4cc9-a6bd-aa2bedac15c1",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Acm Count Should successfully return a count value",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "03d11924-528c-43b9-b287-1447219ff813",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "03d11924-528c-43b9-b287-1447219ff813"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e55b2929-7c9f-4969-8269-66f43b4372ad",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Acm Update \"before all\" hook",
                "timedOut": false,
                "duration": 30,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true);\n    acmData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e43b64ec-08eb-43f4-81d1-15de0b5a2b55",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Acm Update \"after all\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}`;\nsendRequest(url.acm.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e4af7d07-4bf6-4d6f-916c-213e4a7dc1f0",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update acm data",
                "fullTitle": "Acm Update Should successfully update acm data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body);\n    expect(body.nModified).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "eeaad811-4dfb-4893-92cc-ca0f62aa9db6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update acm data (Query not provided)",
                "fullTitle": "Acm Update Should fail to update acm data (Query not provided)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "760523c3-33ad-4392-b56e-c41c74eecf62",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update acm data (Invalid update data)",
                "fullTitle": "Acm Update Should fail to update acm data (Invalid update data)",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0f6f5f61-2712-4bcb-9e17-2f39193ba3ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Acm Update Should successfully push items to target",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f55cd61a-d1f2-465e-a3fc-39d961e6e59c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Acm Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.include.members(update.success.data);\n    let responseArray = body.accessControl.read;\n    delete responseArray[responseArray.indexOf(update.success.data[0])];\n    delete responseArray[responseArray.indexOf(update.success.data[1])];\n    expect(responseArray).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8d55a163-6fa3-4045-bf97-d7ace3653385",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Acm Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0e3b21d6-d1da-4e09-b02c-6168b190d394",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Acm Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e7474370-154c-499a-a598-4f2cfbb8ea7d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Acm Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.notFound&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "86433fc8-2e38-471d-b926-b2eca09901ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Acm Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.notFound&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d6a96580-70c3-4583-ab78-6687f816d787",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Acm Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a17745db-7a33-43b6-870a-f3d7a3593d01",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eeaad811-4dfb-4893-92cc-ca0f62aa9db6",
              "760523c3-33ad-4392-b56e-c41c74eecf62",
              "0f6f5f61-2712-4bcb-9e17-2f39193ba3ee",
              "f55cd61a-d1f2-465e-a3fc-39d961e6e59c",
              "8d55a163-6fa3-4045-bf97-d7ace3653385",
              "0e3b21d6-d1da-4e09-b02c-6168b190d394",
              "e7474370-154c-499a-a598-4f2cfbb8ea7d",
              "86433fc8-2e38-471d-b926-b2eca09901ae",
              "d6a96580-70c3-4583-ab78-6687f816d787",
              "a17745db-7a33-43b6-870a-f3d7a3593d01"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 106,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "304e0004-39e1-4279-a3a2-9136131c1d94",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove acm data",
                "fullTitle": "Acm Remove Should successfully remove acm data",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "633339a9-f9cb-4941-8a5c-06481895e3bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove acm data (Query not provide)",
                "fullTitle": "Acm Remove Should fail to remove acm data (Query not provide)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.acm.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4cde473b-f110-462a-9554-2c59a57af939",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "633339a9-f9cb-4941-8a5c-06481895e3bb",
              "4cde473b-f110-462a-9554-2c59a57af939"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ef7d45b0-24d5-4cb6-9c9e-e147f956f502",
        "title": "Admin",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d50d5c62-ecfe-41b5-ad45-36b4c209caf2",
            "title": "SignUp",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully signup Admin",
                "fullTitle": "Admin SignUp Should successfully signup Admin",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.signup(),'post',adminSignUp,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAdmin(body, true);\n    dummyData.admin.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b96d89f0-a313-4134-be4c-c47fd6d36af8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to signup (Validate error)",
                "fullTitle": "Admin SignUp Should fail to signup (Validate error)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.signup(),'post',dummyData.admin.signup.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f13ddc75-a6d0-4d47-8ebb-2f3651d57696",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to signup (UserName exists)",
                "fullTitle": "Admin SignUp Should fail to signup (UserName exists)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Fails because the exact test have been done before.\nsendRequest(url.admin.signup(),'post',dummyData.admin.signup.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.AUT.USERNAME_EXISTS.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2ef011ff-c334-46de-bec2-f3f38f668546",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b96d89f0-a313-4134-be4c-c47fd6d36af8",
              "f13ddc75-a6d0-4d47-8ebb-2f3651d57696",
              "2ef011ff-c334-46de-bec2-f3f38f668546"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 134,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ab6405a9-67e6-4b83-aec1-ee86f11777d8",
            "title": "Login",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to login (Wrong credential)",
                "fullTitle": "Admin Login Should fail to login (Wrong credential)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',dummyData.admin.signup.wrongCredential,401,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.AUT.UNAUTHORIZED_ACCESS.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cf3a78cf-dbca-46ad-8959-305d2c57795c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to login (Missing fields)",
                "fullTitle": "Admin Login Should fail to login (Missing fields)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',dummyData.admin.signup.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d93d95f8-e85b-4322-b9e4-5cc51df17f69",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully login Admin",
                "fullTitle": "Admin Login Should successfully login Admin",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',adminSignUp,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('token');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ca9c5890-e527-40f5-b290-9d43e667e7c9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cf3a78cf-dbca-46ad-8959-305d2c57795c",
              "d93d95f8-e85b-4322-b9e4-5cc51df17f69",
              "ca9c5890-e527-40f5-b290-9d43e667e7c9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 68,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "183d2336-69c7-47da-9982-97f0417b8640",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Admin Count Should successfully return a count value",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "694ea345-21a7-4092-8a6b-0352687781ff",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "694ea345-21a7-4092-8a6b-0352687781ff"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ca3be7da-ee68-4928-9f23-afa2c89a846a",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin data",
                "fullTitle": "Admin Find Should successfully retrieve admin data",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findByIdPrivate(dummyData.admin.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.admin.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "aec0e99b-e38a-44a6-be76-0cb09a6b5c4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve admin data ( Id wrong format )",
                "fullTitle": "Admin Find Should fail to retrieve admin data ( Id wrong format )",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findByIdPrivate(dummyData.admin.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "aa1a2557-d29e-4a56-90be-5050881e92a1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "aec0e99b-e38a-44a6-be76-0cb09a6b5c4c",
              "aa1a2557-d29e-4a56-90be-5050881e92a1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f9bfd441-bf69-451a-8aa1-7cb23bb6be14",
            "title": "Find Paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin paginated data",
                "fullTitle": "Admin Find Paginated Should successfully retrieve admin paginated data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7768d525-ba83-43c1-88b0-6708a7dd77ef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7768d525-ba83-43c1-88b0-6708a7dd77ef"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "77bf9cd9-a6e4-4378-a9f7-3957bb0a0d95",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update admin data",
                "fullTitle": "Admin Update Should successfully update admin data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body);\n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "50be9c23-7090-472b-980f-74244ef29817",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "Admin Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4b386741-d6ef-476c-93a3-0dfb9d40b801",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update admin data (Invalid update data)",
                "fullTitle": "Admin Update Should fail to update admin data (Invalid update data)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c1537317-d787-4cf8-b5fa-1c64008115fb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "50be9c23-7090-472b-980f-74244ef29817",
              "4b386741-d6ef-476c-93a3-0dfb9d40b801",
              "c1537317-d787-4cf8-b5fa-1c64008115fb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b8975caf-d47e-48f8-995d-0ee42532d5ad",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove admin data",
                "fullTitle": "Admin Remove Should successfully remove admin data",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bd9d481b-e88b-4ac5-a95a-88850f671907",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove admin data. (Query not provided)",
                "fullTitle": "Admin Remove Should fail to remove admin data. (Query not provided)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.admin.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d7e581be-1ab4-4e0f-9ce7-25733a1b9aa7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bd9d481b-e88b-4ac5-a95a-88850f671907",
              "d7e581be-1ab4-4e0f-9ce7-25733a1b9aa7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d9198553-8c44-4dab-a1a5-f749eb077841",
        "title": "Log",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c1b6dd7c-4587-4fc3-bb20-9bf8638d687c",
            "title": "Status",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve server's overall status",
                "fullTitle": "Log Status Should successfully retrieve server's overall status",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.status(),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"memoryUsage\", \"cpuUsage\", \"upTime\"]);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f1750eed-9d65-40aa-b056-ad497f2c941d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f1750eed-9d65-40aa-b056-ad497f2c941d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6cf30df9-fbaa-4560-a15f-388dc53cf2a6",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve log data",
                "fullTitle": "Log Find Should successfully retrieve log data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.get(),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"info\"]);\n    expect(body.info).to.be.an('array');\n    expect(body.info).length.to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4836d189-d0cb-4eb3-9bf8-08fc757c6577",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4836d189-d0cb-4eb3-9bf8-08fc757c6577"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5380b239-b8bb-4c46-9980-15a3be32d9fb",
            "title": "Flush",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully flush log data",
                "fullTitle": "Log Flush Should successfully flush log data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.flush(),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"message\"]);\n    expect(body.message).to.equal(\"Logs flushed\");\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6c9ef494-5cc9-4286-858b-970c63140436",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6c9ef494-5cc9-4286-858b-970c63140436"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2cab7e34-b3ca-416d-b5a0-2ac8a8232c25",
        "title": "Schema",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7f759989-3eae-4807-996d-818f2abd3ce1",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Schema Count Should successfully return a count value",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.schema.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "82666f6c-14ff-4ae5-8ff4-58f6fdb6c90b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "82666f6c-14ff-4ae5-8ff4-58f6fdb6c90b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0df7e5db-382d-4175-86bd-562af2b9625a",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user data (public)",
                "fullTitle": "Schema Find Should successfully retrieve user data (public)",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `schemaName=${dummyData.acm.create.successByObject.schemaName}`;\nsendRequest(url.schema.findPaginated(query),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    let sampleSchema = body.docs[0];\n    isSchema(sampleSchema);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6cab2ae9-163d-45ac-b5de-946572b0cf9f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6cab2ae9-163d-45ac-b5de-946572b0cf9f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7ecec28d-47ee-4f33-a85b-1af64ff3c2b1",
            "title": "Find Paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin paginated data",
                "fullTitle": "Schema Find Paginated Should successfully retrieve admin paginated data",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.schema.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "db5c509c-72df-4907-bb95-d1541f684873",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "db5c509c-72df-4907-bb95-d1541f684873"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a9cb0a78-c5a7-4e01-8160-ee7ef78253d1",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Schema Update \"before all\" hook",
                "timedOut": false,
                "duration": 13,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    roleData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6584127d-f558-477e-8028-e2060fbade30",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to update Schema (Schema does not exist)",
                "fullTitle": "Schema Update Should fail to update Schema (Schema does not exist)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"push\";\nlet query = `schemaName=noneExistent&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c0932e8c-a413-47b5-80a7-2fc598486bc2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update Schema (Target not defined) ",
                "fullTitle": "Schema Update Should fail to update Schema (Target not defined) ",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "64890677-dd7b-4943-abca-939771d704fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update Schema (Operation not defined)",
                "fullTitle": "Schema Update Should fail to update Schema (Operation not defined)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "425e1e70-654f-4958-95d4-4b3080932516",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully add a new role to a method",
                "fullTitle": "Schema Update Should successfully add a new role to a method",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isSchema(body, false);\n    expect(body.accessControl.read).to.contain(roleData.name);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "af8f5a79-70c8-49d1-8418-d7290c8a6726",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully remove a role from a method",
                "fullTitle": "Schema Update Should successfully remove a role from a method",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"pull\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isSchema(body, false);\n    expect(body.accessControl.read).to.not.contain(roleData.name);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8d87e380-417f-4af4-a892-83e5862e5a35",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c0932e8c-a413-47b5-80a7-2fc598486bc2",
              "64890677-dd7b-4943-abca-939771d704fa",
              "425e1e70-654f-4958-95d4-4b3080932516",
              "af8f5a79-70c8-49d1-8418-d7290c8a6726",
              "8d87e380-417f-4af4-a892-83e5862e5a35"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 100,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ba87ba5d-8c13-4e9e-877d-74faf5ebbe53",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove Schema",
                "fullTitle": "Schema Remove Should successfully remove Schema",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `schemaName=${dummyData.acm.create.successByObject.schemaName}`;\nsendRequest(url.schema.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9ab69b1d-ade2-49e6-b60e-911050c5d8e4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9ab69b1d-ade2-49e6-b60e-911050c5d8e4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b312b775-4b89-4efe-a7e1-7d8696bad082",
        "title": "Socket",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0a81e43b-c9bd-4540-b121-813753161eee",
            "title": "Log",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully receive streamed request logs.",
                "fullTitle": "Socket Log Should successfully receive streamed request logs.",
                "timedOut": false,
                "duration": 1065,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let socketURL = `http://0.0.0.0:${process.env.HTTP_PORT}`;\nlet options = {\n    transports: ['websocket'],\n    'force new connection': true\n};\n(()=>{\n    let execRequests = [];\n    for(let i=0; i<1; i++){\n        execRequests.push(function (callback) {\n            setTimeout(function () {\n                let deniedMethodOnObject = {\n                    service     : \"Service A\",\n                        ip          : \"172.16.1.41\",\n                        params      : null,\n                        path        : \"http://sample/route\",\n                        query       : null,\n                        secure      : true,\n                        xhr         : false,\n                        route       : \"http://sample/route\",\n                        method      : \"PUT\",\n                        body        : {sampleKey : \"sampleVal\"},\n                        objectId    : \"5cee7a0456f44a4e65b35532\",\n                        token       : \"wrong_token\"\n                };\n                sendRequest(url.token.validate(),'post',deniedMethodOnObject,200,function () {\n                    callback(null);\n                });\n            },500)\n        })\n    }\n    async.waterfall(execRequests);\n})();\nlet client = socketClient.connect(socketURL, options);\nclient.on('logs', function(data){\n    if(data){done();}\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2abea5c9-f2ee-401d-a3a0-99e7e8d1cc16",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2abea5c9-f2ee-401d-a3a0-99e7e8d1cc16"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1065,
            "root": false,
            "rootEmpty": false,
            "_timeout": 30000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}