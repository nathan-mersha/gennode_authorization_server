{
  "stats": {
    "suites": 51,
    "tests": 115,
    "passes": 115,
    "pending": 0,
    "failures": 0,
    "start": "2019-11-07T07:54:55.569Z",
    "end": "2019-11-07T07:55:00.795Z",
    "duration": 5226,
    "testsRegistered": 115,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "215a8259-8549-40cd-843d-b309779c4ede",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "f48afbb2-1e03-4e27-9d3c-a31a1c5bac53",
        "title": "Token",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f739c791-cd34-4134-a1c9-b374d8d8decf",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to create token (Validation error)",
                "fullTitle": "Token Create Should fail to create token (Validation error)",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.create(),'post',dummyData.token.create.validationError,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "72c22d61-099e-45d0-ab72-35f1ec704dbb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully create token",
                "fullTitle": "Token Create Should successfully create token",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.create(),'post',dummyData.token.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isToken(body, true);\n    dummyData.token.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c73fcc7c-6294-4c87-8e9c-a58d7a066aa7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "72c22d61-099e-45d0-ab72-35f1ec704dbb",
              "c73fcc7c-6294-4c87-8e9c-a58d7a066aa7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 129,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "f1e0fcab-0838-4392-bce6-2a5c01f19f3c",
            "title": "Validate",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Token Validate \"before all\" hook",
                "timedOut": false,
                "duration": 76,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "console.log(\"Generating dummy data for tests.\");\nasync.waterfall([\n    requestToken,\n    updateAnyRole, // route to be accessed by all\n    updateAnyACM,\n    createUserRole,\n    createUserACM\n],function () {\n    done();\n});\n/**\n * @name            - Request token\n * @description     - Requests a new token by userId.\n * @param callback  - Callback function (error)\n */\nfunction requestToken(callback) {\n    sendRequest(url.token.create(),'post',{userId : userId},201,function (err,res) {\n        validateToken.allowedToBeAccessedByAny.token = res.body.token;\n        validateToken.allowedToBeAccessedByNone.token = res.body.token;\n        validateToken.allowedToPerformPUTByAny.token = res.body.token;\n        validateToken.deniedToPerformDELETEByAny.token = res.body.token;\n        validateToken.allowedToPerformPUTByUser.token = res.body.token;\n        validateToken.allowedToPerformPUTByUserOnUserRoute.token = res.body.token;\n        validateToken.allowedToPerformMethodDeniedRoute.token = res.body.token;\n        validateToken.deniedMethodOnObject.token = res.body.token;\n        validateToken.allowedToAccessRoute.token = res.body.token;\n        validateToken.notAllowedToAccessRoute.token = res.body.token;\n        validateToken.notAllowedToAccessMethodButRoute.token = res.body.token;\n        callback(null);\n    });\n}\n/**\n * @name            - Update any role\n * @description     - Updates role type 'any' to have access for the routes accessed by all\n * @param callback  - Callback function (error)\n */\nfunction updateAnyRole(callback) {\n    let updateData  = {accessRoutes : [\n            { route : route.accessedByAll, method : \"POST\"},\n            { route : route.accessedByAll, method : \"PUT\"},\n            { route : route.accessedByAll, method : \"GET\"}\n            ]};\n    sendRequest(url.role.update(\"name=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){callback(null);}\n    });\n}\n/**\n * @name            - Update any acm\n * @description     - Updates any acm role\n * @param callback  - Callback function (error)\n */\nfunction updateAnyACM(callback) {\n    let updateData = {\n        accessControl : {\n            read    : [performPUTOnObjectByAny],\n            update  : [performPUTOnObjectByAny]\n        }\n    };\n    sendRequest(url.acm.update(\"subject=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){callback(null);}\n    });\n}\n/**\n * @name            - Create user role\n * @description     - Create sample role with test user\n * @param callback  - Callback function (error)\n */\nfunction createUserRole(callback) {\n    let sampleRole = {\n        name            : \"Sample Privilege\",\n        description     : \"Sample description for the privilege\",\n        members         : [userId],\n        accessRoutes    : [\n            {route : route.accessedByUser, method : \"PUT\"}\n        ]\n    };\n    sendRequest(url.role.create(),'post',sampleRole,201,function (err,res) {\n        let body = res.body;\n        if(body._id){callback(null);}\n    });\n}\n/**\n * @name            - Create user acm\n * @description     - Creates custom user acm data.\n * @param callback  - Callback function (error)\n */\nfunction createUserACM(callback) {\n    let userACMData = {\n        subject : userId,\n        accessControl : {\n            update : [performPUTOnObjectByUser]\n        }\n    };\n    sendRequest(url.acm.create(),'post',userACMData,200,function (err,res) {\n        let body = res.body;\n        if(body._id){callback(null);}\n    });\n}",
                "err": {},
                "isRoot": false,
                "uuid": "caccd4de-dcc8-439a-a3dd-09ff7dc63949",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Token Validate \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "// Roll back\nasync.waterfall([\n    removedAnyRoleUpdate,\n    removeAnyACMUpdate,\n    removeUserRole,\n    removeUserACM\n],function () {\n    console.log(\"Rollback completed.\")\n});\nfunction removedAnyRoleUpdate(cb) {\n    let updateData  = {accessRoutes : []};\n    sendRequest(url.role.update(\"name=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){cb(null);}\n    });\n}\nfunction removeAnyACMUpdate(cb) {\n    let updateData = {\n        accessControl : {\n            read    : [],\n            update  : []\n        }\n    };\n    sendRequest(url.acm.update(\"subject=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){cb(null);}\n    });\n}\nfunction removeUserRole(cb) {\n    let userRoleQuery = \"name=Sample Privilege\";\n    sendRequest(url.role.remove(userRoleQuery),'delete',null, 200, function (err, res) {\n        if(res.body.ok){cb(null);}\n    });\n}\nfunction removeUserACM(cb) {\n    let userACMQuery = `subject=${userId}`;\n    sendRequest(url.acm.remove(userACMQuery),'delete',null, 200, function (err, res) {\n        if(res.body.ok){cb(null);}\n    });\n}",
                "err": {},
                "isRoot": false,
                "uuid": "3ca8a1ce-7533-4c4f-8ec7-71c9599cafe3",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should fail to grant access (Body missing required fields)",
                "fullTitle": "Token Validate Should fail to grant access (Body missing required fields)",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.missingRequiredFields,400,function (err,res) {\n    let body = res.body;\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode); // Validation error\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "96c6cb35-a503-4134-85ff-e82a3cf93913",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (Route is allowed to be accessed by anyone)",
                "fullTitle": "Token Validate Should successfully grant access (Route is allowed to be accessed by anyone)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToBeAccessedByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "336fd74e-0529-4218-8055-189d3aac322f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (Token has expired)",
                "fullTitle": "Token Validate Should fail to grant access (Token has expired)",
                "timedOut": false,
                "duration": 2041,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let tokenExpirationTimeCopy = process.env.TOKEN_EXPIRATION_TIME;\nprocess.env.TOKEN_EXPIRATION_TIME = \"1000\"; // Change token expiration time to one second.\nasync.waterfall([\n    createAToken,\n    validateExpToken,\n    rollBackExpirationTime\n],function () {\n    done();\n});\n/**\n * @name            - Create token\n * @description     - Creates a new token for user by 1sec expiration time\n * @param cb        - Callback function (error, response)\n */\nfunction createAToken(cb) {\n    sendRequest(url.token.create(),'post',{userId : userId},201,function (err,res) { // Create token\n        cb(null, res);\n    });\n}\n/**\n * @name            - Validate Exp token\n * @description     - Validation an expired token after 2sec (1 sec safe threshold)\n * @param res       - Token data response object\n * @param cb        - Callback function (error)\n */\nfunction validateExpToken(res, cb) {\n    validateToken.toExpireAfterOneSec.token = res.body.token;\n    setTimeout(function () {\n        sendRequest(url.token.validate(),'post',validateToken.toExpireAfterOneSec,401,function (err,res) {\n            let body = res.body;\n            expect(body.message).to.equal(message.ACCESS_DENIED);\n            cb(null);\n        });\n    },2000);\n}\n/**\n * @name            - Roll back expiration time\n * @description     - Rolls back expiration time to whatever was set on the process env before the test.\n * @param cb        - Callback function (error)\n */\nfunction rollBackExpirationTime(cb) {\n    process.env.TOKEN_EXPIRATION_TIME = tokenExpirationTimeCopy;\n    cb(null);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "c64061db-2639-4302-a669-57cfd52e0e92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (Group 'any' is allowed to perform operation on object)",
                "fullTitle": "Token Validate Should successfully grant access (Group 'any' is allowed to perform operation on object)",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "29782613-07d4-45d6-9841-8ac4a2434f54",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully deny access (Group 'any' is not allowed to perform operation on object)",
                "fullTitle": "Token Validate Should successfully deny access (Group 'any' is not allowed to perform operation on object)",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.deniedToPerformDELETEByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "25777ac1-50f6-4d9b-8a3c-64978fd67ac9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to perform method on object, with all access of route)",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to perform method on object, with all access of route)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByUser,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "584d20ae-7e37-4950-87a8-2cab1067db3d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to perform method on object, with only user access route)",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to perform method on object, with only user access route)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByUserOnUserRoute,200,function (err,res) {\n                        let body = res.body;\n                        expect(body.message).to.equal(message.ACCESS_GRANTED);\n                        done();\n                    });",
                "err": {},
                "isRoot": false,
                "uuid": "9e6a0ce4-4231-4607-a827-5b123df886e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to access route+method, no object access (RUD) is requested )",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to access route+method, no object access (RUD) is requested )",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToAccessRoute,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "813e7450-3d03-4d6a-b3a4-057e34690c4d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User is not allowed to access route+method) ",
                "fullTitle": "Token Validate Should fail to grant access (User is not allowed to access route+method) ",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.notAllowedToAccessRoute,400,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1b7c12df-cd03-48b1-99ff-ebb2f33757ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User is not allowed to access method but route)",
                "fullTitle": "Token Validate Should fail to grant access (User is not allowed to access method but route)",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.notAllowedToAccessMethodButRoute,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fefa9845-c1df-4391-810c-4667e7aaedcb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User allowed to perform method on object and denied route.)",
                "fullTitle": "Token Validate Should fail to grant access (User allowed to perform method on object and denied route.)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformMethodDeniedRoute,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2407d91d-3784-4a49-909d-2121885387b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User or 'any' group is denied to perform method on object)",
                "fullTitle": "Token Validate Should fail to grant access (User or 'any' group is denied to perform method on object)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.deniedMethodOnObject,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "65ee3666-9e09-4e58-9854-5f522e879578",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "96c6cb35-a503-4134-85ff-e82a3cf93913",
              "336fd74e-0529-4218-8055-189d3aac322f",
              "c64061db-2639-4302-a669-57cfd52e0e92",
              "29782613-07d4-45d6-9841-8ac4a2434f54",
              "25777ac1-50f6-4d9b-8a3c-64978fd67ac9",
              "584d20ae-7e37-4950-87a8-2cab1067db3d",
              "9e6a0ce4-4231-4607-a827-5b123df886e5",
              "813e7450-3d03-4d6a-b3a4-057e34690c4d",
              "1b7c12df-cd03-48b1-99ff-ebb2f33757ef",
              "fefa9845-c1df-4391-810c-4667e7aaedcb",
              "2407d91d-3784-4a49-909d-2121885387b3",
              "65ee3666-9e09-4e58-9854-5f522e879578"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2274,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "03cbf9aa-019e-4625-b94a-3e840ef9c03d",
        "title": "Service",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3973abf5-8883-4b19-adab-ee8d29ee0650",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create service",
                "fullTitle": "Service Create Should successfully create service",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body, true);\n    dummyData.service.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4873901b-68e1-450b-83ef-87a81614b38c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create service (Method and route fields missing)",
                "fullTitle": "Service Create Should fail to create service (Method and route fields missing)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c25c5052-0f52-46f4-9d6c-dba36d87dd77",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create service (Method is not http method)",
                "fullTitle": "Service Create Should fail to create service (Method is not http method)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "52bd9d8d-2636-4997-9cfd-982660264409",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4873901b-68e1-450b-83ef-87a81614b38c",
              "c25c5052-0f52-46f4-9d6c-dba36d87dd77",
              "52bd9d8d-2636-4997-9cfd-982660264409"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 52,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5e0123f6-b4ae-419f-8e5b-a283d272e739",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve service data (public)",
                "fullTitle": "Service Find Should successfully retrieve service data (public)",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPublic(dummyData.service.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.service.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "156d2bab-402a-482a-8ed8-1218b93722ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve service data (private)",
                "fullTitle": "Service Find Should successfully retrieve service data (private)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPrivate(dummyData.service.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.service.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "adc9e7d0-56c9-4e18-8de0-35aea45a4d79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve service data ( Id wrong format )",
                "fullTitle": "Service Find Should fail to retrieve service data ( Id wrong format )",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPublic(dummyData.service.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8b27bf49-125f-4ff5-970f-46ea1055feb0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "156d2bab-402a-482a-8ed8-1218b93722ed",
              "adc9e7d0-56c9-4e18-8de0-35aea45a4d79",
              "8b27bf49-125f-4ff5-970f-46ea1055feb0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 30,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "19074e57-8b14-4e02-89df-c9ec219a90c0",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve service paginated data",
                "fullTitle": "Service Find paginated Should successfully retrieve service paginated data",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1c421872-18a1-49f5-9d18-224153312485",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1c421872-18a1-49f5-9d18-224153312485"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 42,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4d4a15a5-9e2f-4e5a-87a2-c65e833d5908",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Service Count Should successfully return a count value",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3d2a5d8e-23e1-4237-9481-c9dbac046b7f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3d2a5d8e-23e1-4237-9481-c9dbac046b7f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3a31afec-bfae-4649-b8aa-226a9d2f4b8c",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Service Update \"before all\" hook",
                "timedOut": false,
                "duration": 16,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body, true);\n    serviceData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8f33a773-d72e-4c03-ac75-07f15e0d5f12",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Service Update \"after all\" hook",
                "timedOut": false,
                "duration": 6,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}`;\nsendRequest(url.service.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "13d86ae3-b750-4e47-8b80-80d7210f3f71",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update service data",
                "fullTitle": "Service Update Should successfully update service data",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.update(query),'put',dummyData.service.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f3f62fe3-1adf-4e3f-9a68-0ff706e2ccbb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "Service Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.service.update(query),'put',dummyData.service.update.success,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cb5441a8-8104-4b26-b439-0a9f676a82f5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update service data (Invalid update data)",
                "fullTitle": "Service Update Should fail to update service data (Invalid update data)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.update(query),'put',dummyData.service.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "996919cf-b579-4ca9-bcb4-9729917d1269",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Service Update Should successfully push items to target",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).excluding('_id').to.include(... update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ab0faa53-461f-4925-a535-f54aa98184f9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Service Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).excluding('_id').to.include(...update.success.data);\n    let responseArray = body.routes;\n    helper.removeChildFromParent(responseArray, update.success.data);\n    expect(responseArray).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a68b2fe9-b077-41c0-9764-69be8ec7a793",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Service Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "04e7df1e-aa0d-4312-9141-d91c06a88512",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Service Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a74922fe-e506-429a-96bb-e19a75018d04",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Service Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=notFound&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "aa45fefd-8efe-419c-8e83-d9698d9c9300",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Service Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=notFound&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "be20f6ba-3e84-49b0-b839-6672483c4597",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Service Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ddaf7ecf-cad3-4159-88a3-9db387c678f8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f3f62fe3-1adf-4e3f-9a68-0ff706e2ccbb",
              "cb5441a8-8104-4b26-b439-0a9f676a82f5",
              "996919cf-b579-4ca9-bcb4-9729917d1269",
              "ab0faa53-461f-4925-a535-f54aa98184f9",
              "a68b2fe9-b077-41c0-9764-69be8ec7a793",
              "04e7df1e-aa0d-4312-9141-d91c06a88512",
              "a74922fe-e506-429a-96bb-e19a75018d04",
              "aa45fefd-8efe-419c-8e83-d9698d9c9300",
              "be20f6ba-3e84-49b0-b839-6672483c4597",
              "ddaf7ecf-cad3-4159-88a3-9db387c678f8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 141,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "145142b2-4e01-4b42-b55c-a421eea59206",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove service data",
                "fullTitle": "Service Remove Should successfully remove service data",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8ccd7d84-ed0a-4bd4-9a11-19f322d2feff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove service data. (Query not provided)",
                "fullTitle": "Service Remove Should fail to remove service data. (Query not provided)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.service.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3f9b420d-6f26-4b3c-9391-cf88f37f3f2f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8ccd7d84-ed0a-4bd4-9a11-19f322d2feff",
              "3f9b420d-6f26-4b3c-9391-cf88f37f3f2f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2d62d8f4-cd93-4cbb-a0bb-560139bf3fae",
        "title": "User",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cd597b4a-baee-4b15-8cbd-b920fe3aff26",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create user",
                "fullTitle": "User Create Should successfully create user",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.create(),'post',dummyData.user.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUser(body, true);\n    dummyData.user.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ad0e5d71-da26-4a29-acc8-a85187686401",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create user (Required field missing)",
                "fullTitle": "User Create Should fail to create user (Required field missing)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.create(),'post',dummyData.user.create.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3c78d703-45c9-4e0b-bc69-8b5134348dbf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ad0e5d71-da26-4a29-acc8-a85187686401",
              "3c78d703-45c9-4e0b-bc69-8b5134348dbf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f17df457-fcd4-4af1-b1b5-22846708b9d7",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user data (public)",
                "fullTitle": "User Find Should successfully retrieve user data (public)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPublic(dummyData.user.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.user.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5a6786d1-5f29-42ea-b90d-41f158ee3fa3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve user data (private)",
                "fullTitle": "User Find Should successfully retrieve user data (private)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPrivate(dummyData.user.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.user.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f98ce5e8-b6e0-46a3-af03-7cc375a30733",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve user data ( Id wrong format )",
                "fullTitle": "User Find Should fail to retrieve user data ( Id wrong format )",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPublic(dummyData.user.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "55707381-ba92-4077-bbb8-fa89eb96a490",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5a6786d1-5f29-42ea-b90d-41f158ee3fa3",
              "f98ce5e8-b6e0-46a3-af03-7cc375a30733",
              "55707381-ba92-4077-bbb8-fa89eb96a490"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ef5cf614-9dc7-4a7f-8c0b-1444ec683f9a",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user paginated data",
                "fullTitle": "User Find paginated Should successfully retrieve user paginated data",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "04b6b110-c9f9-4546-8852-a230a2444973",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "04b6b110-c9f9-4546-8852-a230a2444973"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9b3b3f5a-d5b7-4883-9761-437b5a71f8af",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "User Count Should successfully return a count value",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "59b57a04-2664-4ef5-bfad-db805710f6d7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "59b57a04-2664-4ef5-bfad-db805710f6d7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0624987b-6dfb-4e22-af84-adc3cea9f4e2",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update user data",
                "fullTitle": "User Update Should successfully update user data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.update(query),'put',dummyData.user.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "13b945f7-2575-427c-b04a-3cf2da015ff2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "User Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.user.update(query),'put',dummyData.user.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "955fa96c-c6d8-48e7-9306-bf2be402031f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update user data (Invalid update data)",
                "fullTitle": "User Update Should fail to update user data (Invalid update data)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.update(query),'put',dummyData.user.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f42cc0ec-1277-4f64-a9df-1305678d202a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "13b945f7-2575-427c-b04a-3cf2da015ff2",
              "955fa96c-c6d8-48e7-9306-bf2be402031f",
              "f42cc0ec-1277-4f64-a9df-1305678d202a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f133fc37-f868-4005-a0ff-5490d22f7b61",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove user data",
                "fullTitle": "User Remove Should successfully remove user data",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2ebc47e3-c9d4-437c-bd3f-8550f35097a2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove user data. (Query not provided)",
                "fullTitle": "User Remove Should fail to remove user data. (Query not provided)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.user.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "99f8dc1f-0137-43f6-b309-7a3f5b95ba9d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2ebc47e3-c9d4-437c-bd3f-8550f35097a2",
              "99f8dc1f-0137-43f6-b309-7a3f5b95ba9d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3f7f7bcb-1ff9-4575-b391-888811fb6e9a",
        "title": "Role",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "92972456-1cd0-4e07-96df-fa15c1aac022",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create role",
                "fullTitle": "Role Create Should successfully create role",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    dummyData.role.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7893f2d6-dbec-4693-b8a0-0d7d7b995897",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create role (Required field missing)",
                "fullTitle": "Role Create Should fail to create role (Required field missing)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.missingRequiredFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "49627328-1016-4a4b-9475-01d5fa0a4763",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create route (Unknown Http method)",
                "fullTitle": "Role Create Should fail to create route (Unknown Http method)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.invalidMethod,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1b0629c3-0c4f-4165-993a-86b92d2bde0f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7893f2d6-dbec-4693-b8a0-0d7d7b995897",
              "49627328-1016-4a4b-9475-01d5fa0a4763",
              "1b0629c3-0c4f-4165-993a-86b92d2bde0f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 38,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d9ea9624-1057-4e42-8a32-b4bff80d4ea3",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve role data (public)",
                "fullTitle": "Role Find Should successfully retrieve role data (public)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPublic(dummyData.role.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.role.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "89c988bc-0039-4cf3-9176-75bc27c6962c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve role data (private)",
                "fullTitle": "Role Find Should successfully retrieve role data (private)",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPrivate(dummyData.role.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.role.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e61d885e-1d14-44fd-9318-d69d7621f75b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve role data ( Id wrong format )",
                "fullTitle": "Role Find Should fail to retrieve role data ( Id wrong format )",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPublic(dummyData.role.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f3a5052d-8a02-4dd9-bc83-bdec308f2487",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "89c988bc-0039-4cf3-9176-75bc27c6962c",
              "e61d885e-1d14-44fd-9318-d69d7621f75b",
              "f3a5052d-8a02-4dd9-bc83-bdec308f2487"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "399e183b-7040-4a0b-9e05-854fa4ec74b0",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve role paginated data",
                "fullTitle": "Role Find paginated Should successfully retrieve role paginated data",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "72c5e064-1397-44b6-9b06-b128699c4d93",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "72c5e064-1397-44b6-9b06-b128699c4d93"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 33,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8b7f0962-a21b-4555-8d03-496417517cfe",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Role Count Should successfully return a count value",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "73731148-95c9-4519-ad58-38603ccb825f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "73731148-95c9-4519-ad58-38603ccb825f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "37a3920a-5df7-4690-a376-869f3934b523",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Role Update \"before all\" hook",
                "timedOut": false,
                "duration": 11,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    roleData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0882ee3c-85b3-48d5-8392-73bddaea753b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Role Update \"after all\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}`;\nsendRequest(url.role.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "79deb49e-d5a5-4e2d-ba6a-2046ad0c7ee6",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update role data",
                "fullTitle": "Role Update Should successfully update role data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.update(query),'put',dummyData.role.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c9b365aa-2c8f-4559-a0b7-462c76ca3d97",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update role data (Query not provided)",
                "fullTitle": "Role Update Should fail to update role data (Query not provided)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.role.update(query),'put',dummyData.role.update.success,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f27b0ebf-f1cb-48a9-91c6-117ffb2c2e0f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update role data (Invalid update data)",
                "fullTitle": "Role Update Should fail to update role data (Invalid update data)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.update(query),'put',dummyData.role.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1797fa78-8eab-41fd-ad2c-a028103251f6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Role Update Should successfully push items to target",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(\"Pushing items to target, role : -------------------------------------------------\");\nlet query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nconsole.log(\"Url : \", url.role.update(query));\nconsole.log(\"Body : \", JSON.stringify(update.success.data));\nconsole.log(\"Pusing items to target ended -----------------------------------------\");\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    (function () {\n        body.accessRoutes.forEach(function (accessRoute) {\n            delete accessRoute._id;\n        })\n    })();\n    expect(body.accessRoutes).to.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1b3fc764-58dc-4955-a305-6b451f952f78",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Role Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    (function () {\n        body.accessRoutes.forEach(function (accessRoute) {\n            delete accessRoute._id;\n        })\n    })();\n    expect(body.accessRoutes).to.include(...update.success.data);\n    let responseArray = body.accessRoutes;\n    helper.removeChildFromParent(responseArray, update.success.data);\n    expect(responseArray).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "376fddd5-2afc-47e7-8a78-4cc30436e25a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Role Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    expect(body.accessRoutes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f4f248a1-2fd0-4d0a-8e0c-a6b82b55709f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Role Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    expect(body.accessRoutes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2a1da703-e7a0-46f6-b966-1f1d4b79b96f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Role Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=notFound&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "11c51955-7672-4471-b01f-48c72f1468f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Role Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=notFound&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6456c809-e72d-42c9-8e6b-872c9b1d5367",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Role Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0df46c73-2e7c-422e-a0bb-ee1f57a80726",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c9b365aa-2c8f-4559-a0b7-462c76ca3d97",
              "f27b0ebf-f1cb-48a9-91c6-117ffb2c2e0f",
              "1797fa78-8eab-41fd-ad2c-a028103251f6",
              "1b3fc764-58dc-4955-a305-6b451f952f78",
              "376fddd5-2afc-47e7-8a78-4cc30436e25a",
              "f4f248a1-2fd0-4d0a-8e0c-a6b82b55709f",
              "2a1da703-e7a0-46f6-b966-1f1d4b79b96f",
              "11c51955-7672-4471-b01f-48c72f1468f0",
              "6456c809-e72d-42c9-8e6b-872c9b1d5367",
              "0df46c73-2e7c-422e-a0bb-ee1f57a80726"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 114,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "5f02b051-cd53-49d8-a05a-e7429448404d",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove role data",
                "fullTitle": "Role Remove Should successfully remove role data",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "14158b7c-3e1a-46dc-a5ba-dfe1de86cc06",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove role data (Query not provided)",
                "fullTitle": "Role Remove Should fail to remove role data (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.role.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f3745015-560a-4c38-a2a2-f9676973317f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "14158b7c-3e1a-46dc-a5ba-dfe1de86cc06",
              "f3745015-560a-4c38-a2a2-f9676973317f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "407e7210-f516-483b-8708-341d3389af0d",
        "title": "Acm",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "12842dca-e5e3-4a37-acff-703b8da794c7",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create acm",
                "fullTitle": "Acm Create Should successfully create acm",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true);\n    dummyData.acm.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0cba5726-61e2-4123-a2e0-1171a2789518",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully create acm (By Object)",
                "fullTitle": "Acm Create Should successfully create acm (By Object)",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(\"object\"),'post',dummyData.acm.create.successByObject,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true, \"object\");\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f341c282-a200-4bac-89d6-1938c3e091fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create acm (Required field missing)",
                "fullTitle": "Acm Create Should fail to create acm (Required field missing)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4df3939c-4920-418f-acfa-1f8849010a33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create acm (Required field missing, By Object)",
                "fullTitle": "Acm Create Should fail to create acm (Required field missing, By Object)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(\"object\"),'post',dummyData.acm.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a915cc58-7553-44fd-adac-ce1acfc69fa0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0cba5726-61e2-4123-a2e0-1171a2789518",
              "f341c282-a200-4bac-89d6-1938c3e091fa",
              "4df3939c-4920-418f-acfa-1f8849010a33",
              "a915cc58-7553-44fd-adac-ce1acfc69fa0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 73,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "624356a6-5017-4749-bc0b-9a51db043057",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve acm data (public)",
                "fullTitle": "Acm Find Should successfully retrieve acm data (public)",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPublic(dummyData.acm.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.acm.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9ca1e07d-9e6a-4eb4-bef1-7523e1448240",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve acm data (private)",
                "fullTitle": "Acm Find Should successfully retrieve acm data (private)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPrivate(dummyData.acm.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.acm.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "abd056a3-4a2f-4a77-b6d8-585bf764162d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve acm data ( Id wrong format )",
                "fullTitle": "Acm Find Should fail to retrieve acm data ( Id wrong format )",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPublic(dummyData.acm.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "39f71c2b-5020-47bc-bad4-2d18dbef68ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9ca1e07d-9e6a-4eb4-bef1-7523e1448240",
              "abd056a3-4a2f-4a77-b6d8-585bf764162d",
              "39f71c2b-5020-47bc-bad4-2d18dbef68ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1d68a4b9-836b-4e29-bc8e-b13c434e9c11",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve acm paginated data",
                "fullTitle": "Acm Find paginated Should successfully retrieve acm paginated data",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b0fefbbc-3a2d-4fe0-b8d2-edc852b6e196",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b0fefbbc-3a2d-4fe0-b8d2-edc852b6e196"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c2bf91dd-5fd5-40f2-896c-fc10a7921c5c",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Acm Count Should successfully return a count value",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6796dd8b-b392-41d9-b2a9-d066ed430a84",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6796dd8b-b392-41d9-b2a9-d066ed430a84"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9bc89369-fd4d-49e8-b1f9-488dfb99ed17",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Acm Update \"before all\" hook",
                "timedOut": false,
                "duration": 36,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true);\n    acmData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6e90558e-d30f-45a3-b65a-8bb80bea27ab",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Acm Update \"after all\" hook",
                "timedOut": false,
                "duration": 4,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}`;\nsendRequest(url.acm.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e0e2a3ab-960d-4620-bd10-207dae4796bd",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update acm data",
                "fullTitle": "Acm Update Should successfully update acm data",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body);\n    expect(body.nModified).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "975cf54a-104a-4f94-93b6-6fb73967388b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update acm data (Query not provided)",
                "fullTitle": "Acm Update Should fail to update acm data (Query not provided)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8d4ee902-241a-4035-98b0-98cb950a918b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update acm data (Invalid update data)",
                "fullTitle": "Acm Update Should fail to update acm data (Invalid update data)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "304160ac-f8e3-42c5-84f5-5eb3fd63d671",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Acm Update Should successfully push items to target",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1f4f8c3e-b171-4fdc-9e92-58533f376539",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Acm Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.include.members(update.success.data);\n    let responseArray = body.accessControl.read;\n    delete responseArray[responseArray.indexOf(update.success.data[0])];\n    delete responseArray[responseArray.indexOf(update.success.data[1])];\n    expect(responseArray).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2cb5fca6-845d-455c-8428-9dd1a70b039a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Acm Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "16481ff5-32c8-45d7-adf1-17f9bdbb53c1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Acm Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "39a92a51-e8b4-4f8d-9b16-a60a100949a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Acm Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.notFound&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "244b2e74-a708-495b-8ad1-e6b3fe57db3c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Acm Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.notFound&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2eac247d-4cb4-44fa-91dc-71a53dec740f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Acm Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "82f2c9b0-9070-45fc-bf11-0d913d912075",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "975cf54a-104a-4f94-93b6-6fb73967388b",
              "8d4ee902-241a-4035-98b0-98cb950a918b",
              "304160ac-f8e3-42c5-84f5-5eb3fd63d671",
              "1f4f8c3e-b171-4fdc-9e92-58533f376539",
              "2cb5fca6-845d-455c-8428-9dd1a70b039a",
              "16481ff5-32c8-45d7-adf1-17f9bdbb53c1",
              "39a92a51-e8b4-4f8d-9b16-a60a100949a3",
              "244b2e74-a708-495b-8ad1-e6b3fe57db3c",
              "2eac247d-4cb4-44fa-91dc-71a53dec740f",
              "82f2c9b0-9070-45fc-bf11-0d913d912075"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 115,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "81190bc7-6d87-4a25-b89d-399c819c3c95",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove acm data",
                "fullTitle": "Acm Remove Should successfully remove acm data",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cb5e4681-c696-4791-9bf7-c8c96e8b6d14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove acm data (Query not provide)",
                "fullTitle": "Acm Remove Should fail to remove acm data (Query not provide)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.acm.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "50387983-75f6-49c2-be59-241860320912",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cb5e4681-c696-4791-9bf7-c8c96e8b6d14",
              "50387983-75f6-49c2-be59-241860320912"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7182ae22-d18a-4a5c-8695-dc4a42e6ce53",
        "title": "Admin",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6cf0f27b-dbdb-400f-bef1-03ab110311fc",
            "title": "SignUp",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully signup Admin",
                "fullTitle": "Admin SignUp Should successfully signup Admin",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.signup(),'post',adminSignUp,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAdmin(body, true);\n    dummyData.admin.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "77f7077f-db63-47a1-8afe-280d89edff63",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to signup (Validate error)",
                "fullTitle": "Admin SignUp Should fail to signup (Validate error)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.signup(),'post',dummyData.admin.signup.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "15b449aa-e3c8-4926-a619-ed94dd07767c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to signup (UserName exists)",
                "fullTitle": "Admin SignUp Should fail to signup (UserName exists)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Fails because the exact test have been done before.\nsendRequest(url.admin.signup(),'post',dummyData.admin.signup.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.AUT.USERNAME_EXISTS.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "60397946-c75e-46c7-94ad-8b63e5158be4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "77f7077f-db63-47a1-8afe-280d89edff63",
              "15b449aa-e3c8-4926-a619-ed94dd07767c",
              "60397946-c75e-46c7-94ad-8b63e5158be4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 100,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "be66ebc0-0285-487e-8d9e-91e9ec5ed4df",
            "title": "Login",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to login (Wrong credential)",
                "fullTitle": "Admin Login Should fail to login (Wrong credential)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',dummyData.admin.signup.wrongCredential,401,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.AUT.UNAUTHORIZED_ACCESS.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e1f8b99a-2f65-4296-af44-3cba0e8eeac3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to login (Missing fields)",
                "fullTitle": "Admin Login Should fail to login (Missing fields)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',dummyData.admin.signup.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "076b69e5-8fc8-4ec5-9e0a-adb65bf12d39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully login Admin",
                "fullTitle": "Admin Login Should successfully login Admin",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',adminSignUp,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('token');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8d2eeb5e-8b7a-4a9b-968b-8aea1f44f67a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e1f8b99a-2f65-4296-af44-3cba0e8eeac3",
              "076b69e5-8fc8-4ec5-9e0a-adb65bf12d39",
              "8d2eeb5e-8b7a-4a9b-968b-8aea1f44f67a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 63,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "cd357908-e889-4ef7-bc9f-eea4b3a4d7a7",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Admin Count Should successfully return a count value",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d08c6a03-f851-45b8-8cfe-0b5979c44022",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d08c6a03-f851-45b8-8cfe-0b5979c44022"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "48eaf82b-7673-4411-aa9b-f120bd7f1515",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin data",
                "fullTitle": "Admin Find Should successfully retrieve admin data",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findByIdPrivate(dummyData.admin.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.admin.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9d448d64-e08b-4a5e-be59-0c3eda9f57dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve admin data ( Id wrong format )",
                "fullTitle": "Admin Find Should fail to retrieve admin data ( Id wrong format )",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findByIdPrivate(dummyData.admin.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d10dc552-b8b2-4905-8a17-65be0b5d7e18",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9d448d64-e08b-4a5e-be59-0c3eda9f57dc",
              "d10dc552-b8b2-4905-8a17-65be0b5d7e18"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fbadf5dd-a26f-4647-b0c1-5bbd1f1e9e37",
            "title": "Find Paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin paginated data",
                "fullTitle": "Admin Find Paginated Should successfully retrieve admin paginated data",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8d104bbd-8369-422a-a415-dcc9511f27a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8d104bbd-8369-422a-a415-dcc9511f27a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "86263900-6397-44b3-9a5d-d96808e8bc4b",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update admin data",
                "fullTitle": "Admin Update Should successfully update admin data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body);\n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0e3011a7-baa1-4424-9db6-cdc5a471763f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "Admin Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f1160714-87bb-462c-9b8c-8a41b4f6a6f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update admin data (Invalid update data)",
                "fullTitle": "Admin Update Should fail to update admin data (Invalid update data)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c4a76664-12da-49ba-a38e-2a1f40fd5962",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0e3011a7-baa1-4424-9db6-cdc5a471763f",
              "f1160714-87bb-462c-9b8c-8a41b4f6a6f4",
              "c4a76664-12da-49ba-a38e-2a1f40fd5962"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "82196d52-09f6-4674-8ee8-120fe3918869",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove admin data",
                "fullTitle": "Admin Remove Should successfully remove admin data",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ed126f0d-78d2-49c0-9aa7-678f009029a2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove admin data. (Query not provided)",
                "fullTitle": "Admin Remove Should fail to remove admin data. (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.admin.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "81451e10-3015-4136-ad8c-b2f5bd190dcf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ed126f0d-78d2-49c0-9aa7-678f009029a2",
              "81451e10-3015-4136-ad8c-b2f5bd190dcf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1850cef5-8608-4b58-9455-b5a94be6cd1b",
        "title": "Log",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dc8c4866-ebf9-495f-a0de-4a96da39580b",
            "title": "Status",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve server's overall status",
                "fullTitle": "Log Status Should successfully retrieve server's overall status",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.status(),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"memoryUsage\", \"cpuUsage\", \"upTime\"]);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "64f5cacc-79f7-4e7d-b556-e87b2f158860",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "64f5cacc-79f7-4e7d-b556-e87b2f158860"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "886d5bc8-cf38-4113-be26-e7bd8dfdb7b8",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve log data",
                "fullTitle": "Log Find Should successfully retrieve log data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.get(),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"info\"]);\n    expect(body.info).to.be.an('array');\n    expect(body.info).length.to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e40333f0-1312-4b45-b70b-94409f590801",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e40333f0-1312-4b45-b70b-94409f590801"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "81136892-6e89-40e6-a1cb-7cf3f6ac5e49",
            "title": "Flush",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully flush log data",
                "fullTitle": "Log Flush Should successfully flush log data",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.flush(),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"message\"]);\n    expect(body.message).to.equal(\"Logs flushed\");\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cdef03bb-af51-44f1-b29c-cdc525413e67",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cdef03bb-af51-44f1-b29c-cdc525413e67"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "455e014e-158e-49b9-8787-934c8bb62b93",
        "title": "Schema",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0cd60a28-4101-42bd-9f8d-8a107613ea83",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Schema Count Should successfully return a count value",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.schema.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9285a4ac-72ef-4775-92a2-df8344eeb535",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9285a4ac-72ef-4775-92a2-df8344eeb535"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5712d41e-3f0b-4c47-a78b-6268b7b5024b",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user data (public)",
                "fullTitle": "Schema Find Should successfully retrieve user data (public)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `schemaName=${dummyData.acm.create.successByObject.schemaName}`;\nsendRequest(url.schema.findPaginated(query),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    let sampleSchema = body.docs[0];\n    isSchema(sampleSchema);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a1a8a072-0e1c-4acc-9b89-942eae4b05e1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a1a8a072-0e1c-4acc-9b89-942eae4b05e1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8d28a46a-39b7-4136-bc9a-dd92dee61685",
            "title": "Find Paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin paginated data",
                "fullTitle": "Schema Find Paginated Should successfully retrieve admin paginated data",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.schema.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bc76d0bf-c00f-49ac-beed-30a2aef8fb61",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bc76d0bf-c00f-49ac-beed-30a2aef8fb61"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7b4941e9-74d6-45af-805e-91639ff39dbb",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Schema Update \"before all\" hook",
                "timedOut": false,
                "duration": 11,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    roleData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "754f3cce-9052-4c03-893b-90561bfbad44",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to update Schema (Schema does not exist)",
                "fullTitle": "Schema Update Should fail to update Schema (Schema does not exist)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"push\";\nlet query = `schemaName=noneExistent&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "38e6fa9a-6193-4269-b9f0-c84b1606a8de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update Schema (Target not defined) ",
                "fullTitle": "Schema Update Should fail to update Schema (Target not defined) ",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "68ab9f05-1938-45bc-ab1c-f800b85e93e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update Schema (Operation not defined)",
                "fullTitle": "Schema Update Should fail to update Schema (Operation not defined)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dbe96dd2-ce4d-4d5b-a982-7af8ac634e97",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully add a new role to a method",
                "fullTitle": "Schema Update Should successfully add a new role to a method",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],200,function (err, res) {\n    console.log(\"Schema push response : \", JSON.stringify(res.body));\n    let body = res.body;\n    expect(err).to.be.null;\n    isSchema(body, false);\n    expect(body.accessControl.read).to.contain(roleData.name);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "91ba58bc-c3cf-4b7a-a19d-726a532b541f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully remove a role from a method",
                "fullTitle": "Schema Update Should successfully remove a role from a method",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"pull\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isSchema(body, false);\n    expect(body.accessControl.read).to.not.contain(roleData.name);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5fab142d-38e6-4e9e-bd32-b8131def201e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "38e6fa9a-6193-4269-b9f0-c84b1606a8de",
              "68ab9f05-1938-45bc-ab1c-f800b85e93e5",
              "dbe96dd2-ce4d-4d5b-a982-7af8ac634e97",
              "91ba58bc-c3cf-4b7a-a19d-726a532b541f",
              "5fab142d-38e6-4e9e-bd32-b8131def201e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 90,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b69cd63e-0c16-40e5-b611-312744041f06",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove Schema",
                "fullTitle": "Schema Remove Should successfully remove Schema",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `schemaName=${dummyData.acm.create.successByObject.schemaName}`;\nsendRequest(url.schema.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ddd97618-4a1a-472f-a5e8-2070f91cd876",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ddd97618-4a1a-472f-a5e8-2070f91cd876"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c7a78e61-8bfd-4d38-8e6d-3b54b20ce779",
        "title": "Socket",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5a13eff8-afee-4ebc-bc05-7c542cf51002",
            "title": "Log",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully receive streamed request logs.",
                "fullTitle": "Socket Log Should successfully receive streamed request logs.",
                "timedOut": false,
                "duration": 1048,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let socketURL = `http://0.0.0.0:${process.env.HTTP_PORT}`;\nlet options = {\n    transports: ['websocket'],\n    'force new connection': true\n};\n(()=>{\n    let execRequests = [];\n    for(let i=0; i<1; i++){\n        execRequests.push(function (callback) {\n            setTimeout(function () {\n                let deniedMethodOnObject = {\n                    service     : \"Service A\",\n                        ip          : \"172.16.1.41\",\n                        params      : null,\n                        path        : \"http://sample/route\",\n                        query       : null,\n                        secure      : true,\n                        xhr         : false,\n                        route       : \"http://sample/route\",\n                        method      : \"PUT\",\n                        body        : {sampleKey : \"sampleVal\"},\n                        objectId    : \"5cee7a0456f44a4e65b35532\",\n                        token       : \"wrong_token\"\n                };\n                sendRequest(url.token.validate(),'post',deniedMethodOnObject,200,function () {\n                    callback(null);\n                });\n            },500)\n        })\n    }\n    async.waterfall(execRequests);\n})();\nlet client = socketClient.connect(socketURL, options);\nclient.on('logs', function(data){\n    if(data){done();}\n});",
                "err": {},
                "isRoot": false,
                "uuid": "eed4305e-04fd-40d4-8135-9402425566ff",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eed4305e-04fd-40d4-8135-9402425566ff"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1048,
            "root": false,
            "rootEmpty": false,
            "_timeout": 30000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}