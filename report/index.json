{
  "stats": {
    "suites": 51,
    "tests": 115,
    "passes": 115,
    "pending": 0,
    "failures": 0,
    "start": "2019-10-31T08:09:15.939Z",
    "end": "2019-10-31T08:09:20.828Z",
    "duration": 4889,
    "testsRegistered": 115,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "74093900-f04c-40b3-b7f6-a066fbd7845b",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "424e6c39-9d95-4cd7-9ed5-bb537efe6ece",
        "title": "Token",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "18c9d6ef-d941-4cdf-a714-172b5c4037cf",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to create token (Validation error)",
                "fullTitle": "Token Create Should fail to create token (Validation error)",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.create(),'post',dummyData.token.create.validationError,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "69864415-eaa7-49ec-b18b-c4e046717a60",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully create token",
                "fullTitle": "Token Create Should successfully create token",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.create(),'post',dummyData.token.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isToken(body, true);\n    dummyData.token.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e3089a8a-a304-430f-a739-829d300a1e33",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "69864415-eaa7-49ec-b18b-c4e046717a60",
              "e3089a8a-a304-430f-a739-829d300a1e33"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 148,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "dd667c0f-a3e3-4933-8cc1-768ee721d3e0",
            "title": "Validate",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Token Validate \"before all\" hook",
                "timedOut": false,
                "duration": 91,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "console.log(\"Generating dummy data for tests.\");\nasync.waterfall([\n    requestToken,\n    updateAnyRole, // route to be accessed by all\n    updateAnyACM,\n    createUserRole,\n    createUserACM\n],function () {\n    done();\n});\n/**\n * @name            - Request token\n * @description     - Requests a new token by userId.\n * @param callback  - Callback function (error)\n */\nfunction requestToken(callback) {\n    sendRequest(url.token.create(),'post',{userId : userId},201,function (err,res) {\n        validateToken.allowedToBeAccessedByAny.token = res.body.token;\n        validateToken.allowedToBeAccessedByNone.token = res.body.token;\n        validateToken.allowedToPerformPUTByAny.token = res.body.token;\n        validateToken.deniedToPerformDELETEByAny.token = res.body.token;\n        validateToken.allowedToPerformPUTByUser.token = res.body.token;\n        validateToken.allowedToPerformPUTByUserOnUserRoute.token = res.body.token;\n        validateToken.allowedToPerformMethodDeniedRoute.token = res.body.token;\n        validateToken.deniedMethodOnObject.token = res.body.token;\n        validateToken.allowedToAccessRoute.token = res.body.token;\n        validateToken.notAllowedToAccessRoute.token = res.body.token;\n        validateToken.notAllowedToAccessMethodButRoute.token = res.body.token;\n        callback(null);\n    });\n}\n/**\n * @name            - Update any role\n * @description     - Updates role type 'any' to have access for the routes accessed by all\n * @param callback  - Callback function (error)\n */\nfunction updateAnyRole(callback) {\n    let updateData  = {accessRoutes : [\n            { route : route.accessedByAll, method : \"POST\"},\n            { route : route.accessedByAll, method : \"PUT\"},\n            { route : route.accessedByAll, method : \"GET\"}\n            ]};\n    sendRequest(url.role.update(\"name=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){callback(null);}\n    });\n}\n/**\n * @name            - Update any acm\n * @description     - Updates any acm role\n * @param callback  - Callback function (error)\n */\nfunction updateAnyACM(callback) {\n    let updateData = {\n        accessControl : {\n            read    : [performPUTOnObjectByAny],\n            update  : [performPUTOnObjectByAny]\n        }\n    };\n    sendRequest(url.acm.update(\"subject=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){callback(null);}\n    });\n}\n/**\n * @name            - Create user role\n * @description     - Create sample role with test user\n * @param callback  - Callback function (error)\n */\nfunction createUserRole(callback) {\n    let sampleRole = {\n        name            : \"Sample Privilege\",\n        description     : \"Sample description for the privilege\",\n        members         : [userId],\n        accessRoutes    : [\n            {route : route.accessedByUser, method : \"PUT\"}\n        ]\n    };\n    sendRequest(url.role.create(),'post',sampleRole,201,function (err,res) {\n        let body = res.body;\n        if(body._id){callback(null);}\n    });\n}\n/**\n * @name            - Create user acm\n * @description     - Creates custom user acm data.\n * @param callback  - Callback function (error)\n */\nfunction createUserACM(callback) {\n    let userACMData = {\n        subject : userId,\n        accessControl : {\n            update : [performPUTOnObjectByUser]\n        }\n    };\n    sendRequest(url.acm.create(),'post',userACMData,200,function (err,res) {\n        let body = res.body;\n        if(body._id){callback(null);}\n    });\n}",
                "err": {},
                "isRoot": false,
                "uuid": "ab87ae95-2414-4017-aa83-fb90ccb2095a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Token Validate \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "// Roll back\nasync.waterfall([\n    removedAnyRoleUpdate,\n    removeAnyACMUpdate,\n    removeUserRole,\n    removeUserACM\n],function () {\n    console.log(\"Rollback completed.\")\n});\nfunction removedAnyRoleUpdate(cb) {\n    let updateData  = {accessRoutes : []};\n    sendRequest(url.role.update(\"name=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){cb(null);}\n    });\n}\nfunction removeAnyACMUpdate(cb) {\n    let updateData = {\n        accessControl : {\n            read    : [],\n            update  : []\n        }\n    };\n    sendRequest(url.acm.update(\"subject=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){cb(null);}\n    });\n}\nfunction removeUserRole(cb) {\n    let userRoleQuery = \"name=Sample Privilege\";\n    sendRequest(url.role.remove(userRoleQuery),'delete',null, 200, function (err, res) {\n        if(res.body.ok){cb(null);}\n    });\n}\nfunction removeUserACM(cb) {\n    let userACMQuery = `subject=${userId}`;\n    sendRequest(url.acm.remove(userACMQuery),'delete',null, 200, function (err, res) {\n        if(res.body.ok){cb(null);}\n    });\n}",
                "err": {},
                "isRoot": false,
                "uuid": "bab5f2aa-00f1-4ec8-a5bb-0397c0112f60",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should fail to grant access (Body missing required fields)",
                "fullTitle": "Token Validate Should fail to grant access (Body missing required fields)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.missingRequiredFields,400,function (err,res) {\n    let body = res.body;\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode); // Validation error\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "927af3f1-555e-4341-a7f8-234c426b1b9e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (Route is allowed to be accessed by anyone)",
                "fullTitle": "Token Validate Should successfully grant access (Route is allowed to be accessed by anyone)",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToBeAccessedByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b4739a23-cb6c-43d1-94c9-478a4f7873a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (Token has expired)",
                "fullTitle": "Token Validate Should fail to grant access (Token has expired)",
                "timedOut": false,
                "duration": 2036,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let tokenExpirationTimeCopy = process.env.TOKEN_EXPIRATION_TIME;\nprocess.env.TOKEN_EXPIRATION_TIME = \"1000\"; // Change token expiration time to one second.\nasync.waterfall([\n    createAToken,\n    validateExpToken,\n    rollBackExpirationTime\n],function () {\n    done();\n});\n/**\n * @name            - Create token\n * @description     - Creates a new token for user by 1sec expiration time\n * @param cb        - Callback function (error, response)\n */\nfunction createAToken(cb) {\n    sendRequest(url.token.create(),'post',{userId : userId},201,function (err,res) { // Create token\n        cb(null, res);\n    });\n}\n/**\n * @name            - Validate Exp token\n * @description     - Validation an expired token after 2sec (1 sec safe threshold)\n * @param res       - Token data response object\n * @param cb        - Callback function (error)\n */\nfunction validateExpToken(res, cb) {\n    validateToken.toExpireAfterOneSec.token = res.body.token;\n    setTimeout(function () {\n        sendRequest(url.token.validate(),'post',validateToken.toExpireAfterOneSec,401,function (err,res) {\n            let body = res.body;\n            expect(body.message).to.equal(message.ACCESS_DENIED);\n            cb(null);\n        });\n    },2000);\n}\n/**\n * @name            - Roll back expiration time\n * @description     - Rolls back expiration time to whatever was set on the process env before the test.\n * @param cb        - Callback function (error)\n */\nfunction rollBackExpirationTime(cb) {\n    process.env.TOKEN_EXPIRATION_TIME = tokenExpirationTimeCopy;\n    cb(null);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "00187cf6-d02e-49b2-83c4-9d31f13a4875",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (Group 'any' is allowed to perform operation on object)",
                "fullTitle": "Token Validate Should successfully grant access (Group 'any' is allowed to perform operation on object)",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "18fca91e-f12d-471f-9824-d7665effec65",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully deny access (Group 'any' is not allowed to perform operation on object)",
                "fullTitle": "Token Validate Should successfully deny access (Group 'any' is not allowed to perform operation on object)",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.deniedToPerformDELETEByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "117133c8-f824-42fc-9107-bdd7b08b1109",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to perform method on object, with all access of route)",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to perform method on object, with all access of route)",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByUser,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "66203b84-ba23-4a1e-a74f-f7f2d18c9a5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to perform method on object, with only user access route)",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to perform method on object, with only user access route)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByUserOnUserRoute,200,function (err,res) {\n                        let body = res.body;\n                        expect(body.message).to.equal(message.ACCESS_GRANTED);\n                        done();\n                    });",
                "err": {},
                "isRoot": false,
                "uuid": "482c4731-556c-4e66-9308-c782588ce034",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to access route+method, no object access (RUD) is requested )",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to access route+method, no object access (RUD) is requested )",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToAccessRoute,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a2c1e1b9-e017-4dcf-8ddc-6581af17d598",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User is not allowed to access route+method) ",
                "fullTitle": "Token Validate Should fail to grant access (User is not allowed to access route+method) ",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.notAllowedToAccessRoute,400,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b957ad06-cc89-4dfc-b516-8aa8093d7691",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User is not allowed to access method but route)",
                "fullTitle": "Token Validate Should fail to grant access (User is not allowed to access method but route)",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.notAllowedToAccessMethodButRoute,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a1f30dad-7d35-432a-931e-7702ca5a109b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User allowed to perform method on object and denied route.)",
                "fullTitle": "Token Validate Should fail to grant access (User allowed to perform method on object and denied route.)",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformMethodDeniedRoute,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f2cae5d8-80aa-4bad-8ab2-4e7e3fb52459",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User or 'any' group is denied to perform method on object)",
                "fullTitle": "Token Validate Should fail to grant access (User or 'any' group is denied to perform method on object)",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.deniedMethodOnObject,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f03cf766-c84c-44bc-84d4-eb3bd355b5c9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "927af3f1-555e-4341-a7f8-234c426b1b9e",
              "b4739a23-cb6c-43d1-94c9-478a4f7873a5",
              "00187cf6-d02e-49b2-83c4-9d31f13a4875",
              "18fca91e-f12d-471f-9824-d7665effec65",
              "117133c8-f824-42fc-9107-bdd7b08b1109",
              "66203b84-ba23-4a1e-a74f-f7f2d18c9a5d",
              "482c4731-556c-4e66-9308-c782588ce034",
              "a2c1e1b9-e017-4dcf-8ddc-6581af17d598",
              "b957ad06-cc89-4dfc-b516-8aa8093d7691",
              "a1f30dad-7d35-432a-931e-7702ca5a109b",
              "f2cae5d8-80aa-4bad-8ab2-4e7e3fb52459",
              "f03cf766-c84c-44bc-84d4-eb3bd355b5c9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2261,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6aaa026c-67a1-4b92-9e4d-140f9a8f7289",
        "title": "Service",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "52a62f43-cdbf-4fe5-a254-b3c38f094210",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create service",
                "fullTitle": "Service Create Should successfully create service",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body, true);\n    dummyData.service.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f1734efc-24be-4f87-a043-ba9c91df0122",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create service (Method and route fields missing)",
                "fullTitle": "Service Create Should fail to create service (Method and route fields missing)",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "50f72afa-9e51-48b8-9fc4-b63afd6b72b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create service (Method is not http method)",
                "fullTitle": "Service Create Should fail to create service (Method is not http method)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7bebd371-5585-4231-978a-283955c8e313",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f1734efc-24be-4f87-a043-ba9c91df0122",
              "50f72afa-9e51-48b8-9fc4-b63afd6b72b8",
              "7bebd371-5585-4231-978a-283955c8e313"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 44,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "da22c449-5ce0-43a9-a373-f4d759d88a10",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve service data (public)",
                "fullTitle": "Service Find Should successfully retrieve service data (public)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPublic(dummyData.service.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.service.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "24b41eac-8b9c-479c-952b-d71bc655e1ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve service data (private)",
                "fullTitle": "Service Find Should successfully retrieve service data (private)",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPrivate(dummyData.service.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.service.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "45714088-1069-4073-b03b-7612b62d0d76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve service data ( Id wrong format )",
                "fullTitle": "Service Find Should fail to retrieve service data ( Id wrong format )",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPublic(dummyData.service.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e6d8e370-93bb-4712-a57a-922c74094b65",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "24b41eac-8b9c-479c-952b-d71bc655e1ce",
              "45714088-1069-4073-b03b-7612b62d0d76",
              "e6d8e370-93bb-4712-a57a-922c74094b65"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e6c1d143-1b9e-4812-a26f-3e4987d22852",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve service paginated data",
                "fullTitle": "Service Find paginated Should successfully retrieve service paginated data",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "82e50394-60fd-4f80-bb26-199478d5c841",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "82e50394-60fd-4f80-bb26-199478d5c841"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "efc256a2-b92c-4f4d-8e37-30b76dcc8ba6",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Service Count Should successfully return a count value",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2c437e8c-9f1f-42ca-8cc5-3f0a9ca968f7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2c437e8c-9f1f-42ca-8cc5-3f0a9ca968f7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7da5ddb6-bc02-458f-ac01-7b527bc397d0",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Service Update \"before all\" hook",
                "timedOut": false,
                "duration": 12,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body, true);\n    serviceData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ea820c22-5dd1-4bc7-9ca5-65d0831dc2e2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Service Update \"after all\" hook",
                "timedOut": false,
                "duration": 9,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}`;\nsendRequest(url.service.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "32088d64-6796-449d-874c-f830d81cbf03",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update service data",
                "fullTitle": "Service Update Should successfully update service data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.update(query),'put',dummyData.service.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "67e09c2a-6797-421c-8165-51b591d42ead",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "Service Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.service.update(query),'put',dummyData.service.update.success,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "33ad6987-f49b-434c-83f8-e44d3b0a9da3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update service data (Invalid update data)",
                "fullTitle": "Service Update Should fail to update service data (Invalid update data)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.update(query),'put',dummyData.service.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9376af40-45ce-4afa-9a07-d1090acb0cad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Service Update Should successfully push items to target",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).excluding('_id').to.include(... update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a28b20ca-e8b2-4d81-9d31-3716db6d5b52",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Service Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).excluding('_id').to.include(...update.success.data);\n    let responseArray = body.routes;\n    helper.removeChildFromParent(responseArray, update.success.data);\n    expect(responseArray).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9b22bdc7-1876-4ae9-a73a-8f5ca77050e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Service Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "21ccb068-4a46-4bc1-af7f-21a6d02491d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Service Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2d03e7ac-3910-48ad-bdc4-2fba7e7ce0c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Service Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=notFound&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1a4b86c0-6eda-4fd5-a959-c848ff81c9ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Service Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=notFound&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "56547595-2931-41c0-8669-d385dd1db5a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Service Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0be24795-29c3-49eb-8c39-0fa16f2be3b0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "67e09c2a-6797-421c-8165-51b591d42ead",
              "33ad6987-f49b-434c-83f8-e44d3b0a9da3",
              "9376af40-45ce-4afa-9a07-d1090acb0cad",
              "a28b20ca-e8b2-4d81-9d31-3716db6d5b52",
              "9b22bdc7-1876-4ae9-a73a-8f5ca77050e1",
              "21ccb068-4a46-4bc1-af7f-21a6d02491d9",
              "2d03e7ac-3910-48ad-bdc4-2fba7e7ce0c3",
              "1a4b86c0-6eda-4fd5-a959-c848ff81c9ee",
              "56547595-2931-41c0-8669-d385dd1db5a5",
              "0be24795-29c3-49eb-8c39-0fa16f2be3b0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 105,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "525d2e20-0d60-41dd-a5d7-d3a905014279",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove service data",
                "fullTitle": "Service Remove Should successfully remove service data",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "db53189d-56a3-41ce-8fe5-723261be287b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove service data. (Query not provided)",
                "fullTitle": "Service Remove Should fail to remove service data. (Query not provided)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.service.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "88f578f0-0292-41cb-b411-7eb811f82cec",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "db53189d-56a3-41ce-8fe5-723261be287b",
              "88f578f0-0292-41cb-b411-7eb811f82cec"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ab2d23fc-300c-47fc-886c-4fcf751d4f57",
        "title": "User",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ee537ace-2898-47fe-9672-6e1e1cbb127c",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create user",
                "fullTitle": "User Create Should successfully create user",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.create(),'post',dummyData.user.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUser(body, true);\n    dummyData.user.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "02b7f092-8321-48cc-bddb-b7c75e7bd011",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create user (Required field missing)",
                "fullTitle": "User Create Should fail to create user (Required field missing)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.create(),'post',dummyData.user.create.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d5060a8f-437c-4f5a-b639-76cfcfe091f8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "02b7f092-8321-48cc-bddb-b7c75e7bd011",
              "d5060a8f-437c-4f5a-b639-76cfcfe091f8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "07e41a78-ba28-42c7-be37-4316b2819cb0",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user data (public)",
                "fullTitle": "User Find Should successfully retrieve user data (public)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPublic(dummyData.user.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.user.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "17f7eb2f-99bf-4d9f-8b3a-7deb7c8b25f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve user data (private)",
                "fullTitle": "User Find Should successfully retrieve user data (private)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPrivate(dummyData.user.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.user.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dae5ecc0-42d4-4c5d-87c5-0bf1a8eba57c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve user data ( Id wrong format )",
                "fullTitle": "User Find Should fail to retrieve user data ( Id wrong format )",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPublic(dummyData.user.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8853d688-923c-4a1d-8c05-a02da453cf79",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "17f7eb2f-99bf-4d9f-8b3a-7deb7c8b25f0",
              "dae5ecc0-42d4-4c5d-87c5-0bf1a8eba57c",
              "8853d688-923c-4a1d-8c05-a02da453cf79"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "38db7918-6ab6-4e7f-8611-35e4669b4fe4",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user paginated data",
                "fullTitle": "User Find paginated Should successfully retrieve user paginated data",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0d6d0ce4-40cc-481a-9e7d-d6f2caecd0a2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0d6d0ce4-40cc-481a-9e7d-d6f2caecd0a2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1cbed4da-ee61-41ee-9883-d9b7c823a2b9",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "User Count Should successfully return a count value",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "051a0e30-03b2-43b0-bbb9-b5de9d7227b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "051a0e30-03b2-43b0-bbb9-b5de9d7227b5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3c95c656-71e9-4221-9de5-8abd9609ac35",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update user data",
                "fullTitle": "User Update Should successfully update user data",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.update(query),'put',dummyData.user.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "910fbce5-84a8-4245-964d-81a3cccc0f01",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "User Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.user.update(query),'put',dummyData.user.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "11df42c1-ed8a-4686-bdd2-3bb53c0b19ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update user data (Invalid update data)",
                "fullTitle": "User Update Should fail to update user data (Invalid update data)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.update(query),'put',dummyData.user.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0575be2b-f9d3-4899-8b3d-dadc6527e56d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "910fbce5-84a8-4245-964d-81a3cccc0f01",
              "11df42c1-ed8a-4686-bdd2-3bb53c0b19ab",
              "0575be2b-f9d3-4899-8b3d-dadc6527e56d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f9b863d9-8f25-4008-96a4-266a6b128d0b",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove user data",
                "fullTitle": "User Remove Should successfully remove user data",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "80daaaa2-b3b4-4e44-aa2b-33e2cfc01a3b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove user data. (Query not provided)",
                "fullTitle": "User Remove Should fail to remove user data. (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.user.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8dcccecc-c397-42bd-bea6-0978f182a5ad",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "80daaaa2-b3b4-4e44-aa2b-33e2cfc01a3b",
              "8dcccecc-c397-42bd-bea6-0978f182a5ad"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "04ca87ff-f0d0-4179-895b-246c94bfb3f2",
        "title": "Role",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1dba9e3a-c2e5-4582-8373-3c12515774ca",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create role",
                "fullTitle": "Role Create Should successfully create role",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    dummyData.role.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dfa8f949-7b9a-4aaa-83f8-72ce1f3781ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create role (Required field missing)",
                "fullTitle": "Role Create Should fail to create role (Required field missing)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.missingRequiredFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bbce56c7-a365-49de-a1e6-77da32221bc4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create route (Unknown Http method)",
                "fullTitle": "Role Create Should fail to create route (Unknown Http method)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.invalidMethod,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c62d43dd-cb59-43ba-b8cd-21cac3fef76e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dfa8f949-7b9a-4aaa-83f8-72ce1f3781ed",
              "bbce56c7-a365-49de-a1e6-77da32221bc4",
              "c62d43dd-cb59-43ba-b8cd-21cac3fef76e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 34,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "30300fbc-503e-426d-8904-ab409066607d",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve role data (public)",
                "fullTitle": "Role Find Should successfully retrieve role data (public)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPublic(dummyData.role.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.role.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2becb46b-a7a1-440b-b262-5e23ad49e759",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve role data (private)",
                "fullTitle": "Role Find Should successfully retrieve role data (private)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPrivate(dummyData.role.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.role.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "da90d46b-5276-4659-b87b-4c247728e13e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve role data ( Id wrong format )",
                "fullTitle": "Role Find Should fail to retrieve role data ( Id wrong format )",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPublic(dummyData.role.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d224a6aa-5d4a-4793-b228-0a515bd5d464",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2becb46b-a7a1-440b-b262-5e23ad49e759",
              "da90d46b-5276-4659-b87b-4c247728e13e",
              "d224a6aa-5d4a-4793-b228-0a515bd5d464"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6759c0ec-3419-4e5c-a7ef-659942818755",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve role paginated data",
                "fullTitle": "Role Find paginated Should successfully retrieve role paginated data",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2e9c2846-c8dc-4ce3-8011-b5109404282f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2e9c2846-c8dc-4ce3-8011-b5109404282f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ef41a29a-79ee-4e10-a820-c0e614ec751a",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Role Count Should successfully return a count value",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "849559ec-b8cc-4a2a-bc20-6df6c36ffb40",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "849559ec-b8cc-4a2a-bc20-6df6c36ffb40"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e6003e68-38a3-43a2-9f4a-8b85d097de83",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Role Update \"before all\" hook",
                "timedOut": false,
                "duration": 7,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    roleData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6bb60b86-0aa1-4fa7-81ee-affef5eb08f7",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Role Update \"after all\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}`;\nsendRequest(url.role.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "04037e42-8bb0-4585-aca9-9f939eb00a36",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update role data",
                "fullTitle": "Role Update Should successfully update role data",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.update(query),'put',dummyData.role.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "096a35ab-2420-4345-9d85-090abb1e8449",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update role data (Query not provided)",
                "fullTitle": "Role Update Should fail to update role data (Query not provided)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.role.update(query),'put',dummyData.role.update.success,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "09011320-561e-471d-9ffa-349b30d271d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update role data (Invalid update data)",
                "fullTitle": "Role Update Should fail to update role data (Invalid update data)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.update(query),'put',dummyData.role.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4e9bf3fd-0df7-4a9e-ac14-2a58801e3983",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Role Update Should successfully push items to target",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    (function () {\n        body.accessRoutes.forEach(function (accessRoute) {\n            delete accessRoute._id;\n        })\n    })();\n    expect(body.accessRoutes).to.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "834fa573-49d9-466f-a475-2d0961ef36ca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Role Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    (function () {\n        body.accessRoutes.forEach(function (accessRoute) {\n            delete accessRoute._id;\n        })\n    })();\n    expect(body.accessRoutes).to.include(...update.success.data);\n    let responseArray = body.accessRoutes;\n    helper.removeChildFromParent(responseArray, update.success.data);\n    expect(responseArray).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "81ffbac0-3734-4da6-9ee2-3f95dca7798e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Role Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    expect(body.accessRoutes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e3434bc3-4b16-41a5-8b02-be38b9bb0dc7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Role Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    expect(body.accessRoutes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "847cf874-aade-4147-bdc4-d53709040131",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Role Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=notFound&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "121285a2-6aaa-4a2c-aced-5cf2282eb0a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Role Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=notFound&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fdc6d3ab-32e8-4f4d-9720-d9c0364581d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Role Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "51888ca7-4b57-40b1-8147-f128f7eb93f9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "096a35ab-2420-4345-9d85-090abb1e8449",
              "09011320-561e-471d-9ffa-349b30d271d9",
              "4e9bf3fd-0df7-4a9e-ac14-2a58801e3983",
              "834fa573-49d9-466f-a475-2d0961ef36ca",
              "81ffbac0-3734-4da6-9ee2-3f95dca7798e",
              "e3434bc3-4b16-41a5-8b02-be38b9bb0dc7",
              "847cf874-aade-4147-bdc4-d53709040131",
              "121285a2-6aaa-4a2c-aced-5cf2282eb0a0",
              "fdc6d3ab-32e8-4f4d-9720-d9c0364581d9",
              "51888ca7-4b57-40b1-8147-f128f7eb93f9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 72,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "d976785a-b1b0-4fae-81ca-a620b402a0bd",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove role data",
                "fullTitle": "Role Remove Should successfully remove role data",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "14ca37e3-d39b-4e63-9bad-a34e6dda7a7e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove role data (Query not provided)",
                "fullTitle": "Role Remove Should fail to remove role data (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.role.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9ddfe684-40c3-48dd-8524-ba6779ad96cc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "14ca37e3-d39b-4e63-9bad-a34e6dda7a7e",
              "9ddfe684-40c3-48dd-8524-ba6779ad96cc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "954aa6b4-d966-41cc-9e2b-b59c45d88f29",
        "title": "Acm",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4b1c8bce-b335-4790-9eb0-9b004edab787",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create acm",
                "fullTitle": "Acm Create Should successfully create acm",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true);\n    dummyData.acm.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "35718598-2806-468e-b9d5-063f54beca03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully create acm (By Object)",
                "fullTitle": "Acm Create Should successfully create acm (By Object)",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(\"object\"),'post',dummyData.acm.create.successByObject,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true, \"object\");\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "639b7908-1197-41b1-9ec1-02cc11498374",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create acm (Required field missing)",
                "fullTitle": "Acm Create Should fail to create acm (Required field missing)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "19806d91-6c73-4e72-8cfe-3d16699500ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create acm (Required field missing, By Object)",
                "fullTitle": "Acm Create Should fail to create acm (Required field missing, By Object)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(\"object\"),'post',dummyData.acm.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a12908b2-ceac-4f8c-8f78-5c4105ebfe99",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "35718598-2806-468e-b9d5-063f54beca03",
              "639b7908-1197-41b1-9ec1-02cc11498374",
              "19806d91-6c73-4e72-8cfe-3d16699500ed",
              "a12908b2-ceac-4f8c-8f78-5c4105ebfe99"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 66,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c4a099fe-d9d6-42d8-9aa5-256d62016a2a",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve acm data (public)",
                "fullTitle": "Acm Find Should successfully retrieve acm data (public)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPublic(dummyData.acm.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.acm.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2dee3412-d342-407f-9124-42939f2e5b9d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve acm data (private)",
                "fullTitle": "Acm Find Should successfully retrieve acm data (private)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPrivate(dummyData.acm.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.acm.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "108f2401-2622-491a-8567-166d456f2288",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve acm data ( Id wrong format )",
                "fullTitle": "Acm Find Should fail to retrieve acm data ( Id wrong format )",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPublic(dummyData.acm.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1bd2eacd-d96b-48d5-bf81-c688b437e227",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2dee3412-d342-407f-9124-42939f2e5b9d",
              "108f2401-2622-491a-8567-166d456f2288",
              "1bd2eacd-d96b-48d5-bf81-c688b437e227"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7d520f65-eeb3-4ee8-a39b-70b2c3a67067",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve acm paginated data",
                "fullTitle": "Acm Find paginated Should successfully retrieve acm paginated data",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7d1840df-edd2-4035-b3ce-861d16066ac2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7d1840df-edd2-4035-b3ce-861d16066ac2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "287af1f9-8f12-4791-84dc-cf3cd5f85cc0",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Acm Count Should successfully return a count value",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e4b00674-4d8c-413a-9569-10514c047451",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e4b00674-4d8c-413a-9569-10514c047451"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d57debb0-96de-427f-9736-028eeecf7fb6",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Acm Update \"before all\" hook",
                "timedOut": false,
                "duration": 20,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true);\n    acmData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "33f4910a-0afe-4ff7-868c-e5854cb66bb4",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Acm Update \"after all\" hook",
                "timedOut": false,
                "duration": 10,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}`;\nsendRequest(url.acm.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c0fa8dec-3932-4314-a1e2-1c11a80cd8b2",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update acm data",
                "fullTitle": "Acm Update Should successfully update acm data",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body);\n    expect(body.nModified).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6c716d24-b247-408f-8d25-b953f58f4b1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update acm data (Query not provided)",
                "fullTitle": "Acm Update Should fail to update acm data (Query not provided)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a78fdfb9-472f-4b0c-ae02-0532d145ce1c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update acm data (Invalid update data)",
                "fullTitle": "Acm Update Should fail to update acm data (Invalid update data)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "924f2960-5592-4f6f-b986-06ee5fc5d51b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Acm Update Should successfully push items to target",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4db30ec5-eca5-45d6-b2fa-468b3b322c8e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Acm Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.include.members(update.success.data);\n    let responseArray = body.accessControl.read;\n    delete responseArray[responseArray.indexOf(update.success.data[0])];\n    delete responseArray[responseArray.indexOf(update.success.data[1])];\n    expect(responseArray).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0ce6aa0d-295f-4426-85fa-5641de492f42",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Acm Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6651ad64-505c-4e84-9ad4-62364ae92be6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Acm Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0031f8df-4e56-484e-8f39-9c2e65fa5cc5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Acm Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.notFound&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6dfb11a9-0cf5-4878-a0a4-150f7b749eb1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Acm Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.notFound&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "82061cc2-9f14-4b0b-9d93-11edfa500bdc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Acm Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "def9fb93-fbf2-4cbf-bcbf-89d1fdafe53f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6c716d24-b247-408f-8d25-b953f58f4b1b",
              "a78fdfb9-472f-4b0c-ae02-0532d145ce1c",
              "924f2960-5592-4f6f-b986-06ee5fc5d51b",
              "4db30ec5-eca5-45d6-b2fa-468b3b322c8e",
              "0ce6aa0d-295f-4426-85fa-5641de492f42",
              "6651ad64-505c-4e84-9ad4-62364ae92be6",
              "0031f8df-4e56-484e-8f39-9c2e65fa5cc5",
              "6dfb11a9-0cf5-4878-a0a4-150f7b749eb1",
              "82061cc2-9f14-4b0b-9d93-11edfa500bdc",
              "def9fb93-fbf2-4cbf-bcbf-89d1fdafe53f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 77,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "594e33eb-a947-4b92-bbcb-db577b40dcaf",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove acm data",
                "fullTitle": "Acm Remove Should successfully remove acm data",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d034ec3d-8d4d-4eb1-8b52-7578fe4d4c6b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove acm data (Query not provide)",
                "fullTitle": "Acm Remove Should fail to remove acm data (Query not provide)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.acm.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f631bd04-38f5-4a0f-880d-2b099e23e6e5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d034ec3d-8d4d-4eb1-8b52-7578fe4d4c6b",
              "f631bd04-38f5-4a0f-880d-2b099e23e6e5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "10ba41df-f419-4592-b756-ac251fb503e1",
        "title": "Admin",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9a0a353e-8585-4e26-928b-d5f2d8befe1f",
            "title": "SignUp",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully signup Admin",
                "fullTitle": "Admin SignUp Should successfully signup Admin",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.signup(),'post',adminSignUp,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAdmin(body, true);\n    dummyData.admin.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4b5d42a7-9eb7-459a-aaaf-332b2a204274",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to signup (Validate error)",
                "fullTitle": "Admin SignUp Should fail to signup (Validate error)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.signup(),'post',dummyData.admin.signup.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "45e3faf2-2a71-4d09-a8cb-d6a7640f4606",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to signup (UserName exists)",
                "fullTitle": "Admin SignUp Should fail to signup (UserName exists)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Fails because the exact test have been done before.\nsendRequest(url.admin.signup(),'post',dummyData.admin.signup.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.AUT.USERNAME_EXISTS.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5a21cd48-48af-487c-b543-b46af86d8900",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4b5d42a7-9eb7-459a-aaaf-332b2a204274",
              "45e3faf2-2a71-4d09-a8cb-d6a7640f4606",
              "5a21cd48-48af-487c-b543-b46af86d8900"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 82,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "214800c5-93b1-45c1-ae03-4a1f9b424877",
            "title": "Login",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to login (Wrong credential)",
                "fullTitle": "Admin Login Should fail to login (Wrong credential)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',dummyData.admin.signup.wrongCredential,401,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.AUT.UNAUTHORIZED_ACCESS.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0013ab9e-3319-4ab7-95b2-0cc1987515c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to login (Missing fields)",
                "fullTitle": "Admin Login Should fail to login (Missing fields)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',dummyData.admin.signup.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4ec4410d-c745-4d3b-9734-4ac34c20d424",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully login Admin",
                "fullTitle": "Admin Login Should successfully login Admin",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',adminSignUp,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('token');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cee1a0fe-14aa-4387-86c2-acb57b9aac45",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0013ab9e-3319-4ab7-95b2-0cc1987515c3",
              "4ec4410d-c745-4d3b-9734-4ac34c20d424",
              "cee1a0fe-14aa-4387-86c2-acb57b9aac45"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 47,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9f093d88-c6a2-44a0-8ad8-5abf38c7f37b",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Admin Count Should successfully return a count value",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4b99d40d-21e8-40e8-be6b-3f27b1519a0b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4b99d40d-21e8-40e8-be6b-3f27b1519a0b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2a63b834-883f-4b2c-9cad-49e362a6f858",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin data",
                "fullTitle": "Admin Find Should successfully retrieve admin data",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findByIdPrivate(dummyData.admin.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.admin.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e93cff05-caaf-4d6b-b102-b1f6cdfd39dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve admin data ( Id wrong format )",
                "fullTitle": "Admin Find Should fail to retrieve admin data ( Id wrong format )",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findByIdPrivate(dummyData.admin.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "09466147-ebb5-43e2-aba2-8b22c75c9c41",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e93cff05-caaf-4d6b-b102-b1f6cdfd39dc",
              "09466147-ebb5-43e2-aba2-8b22c75c9c41"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "389b2b9b-2f6e-4f50-9b56-5c9462e84d6a",
            "title": "Find Paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin paginated data",
                "fullTitle": "Admin Find Paginated Should successfully retrieve admin paginated data",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "88bf9491-b284-403e-b497-ea0d0f3158bd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "88bf9491-b284-403e-b497-ea0d0f3158bd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "237a467b-d711-4784-b989-97d7662df82e",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update admin data",
                "fullTitle": "Admin Update Should successfully update admin data",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body);\n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e0227897-eb7b-4f4c-8ad8-aadd72ed299e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "Admin Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "63ea8d2a-3f08-44e4-9bbd-50e8bb75a6a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update admin data (Invalid update data)",
                "fullTitle": "Admin Update Should fail to update admin data (Invalid update data)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e4802176-aba6-4866-b759-58bdac598a01",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e0227897-eb7b-4f4c-8ad8-aadd72ed299e",
              "63ea8d2a-3f08-44e4-9bbd-50e8bb75a6a4",
              "e4802176-aba6-4866-b759-58bdac598a01"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0e57d5ee-f091-48d5-bafb-5654f10dada6",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove admin data",
                "fullTitle": "Admin Remove Should successfully remove admin data",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "86fb8b5f-44b2-4ea5-ac1b-c0f6a62775fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove admin data. (Query not provided)",
                "fullTitle": "Admin Remove Should fail to remove admin data. (Query not provided)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.admin.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a173a76c-2826-4523-b00b-bd5cafbb3311",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "86fb8b5f-44b2-4ea5-ac1b-c0f6a62775fa",
              "a173a76c-2826-4523-b00b-bd5cafbb3311"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "231e356c-06f9-429c-8548-5f33d501da8a",
        "title": "Log",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "62ea9d6e-6428-42ba-a850-c0bee47f02a6",
            "title": "Status",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve server's overall status",
                "fullTitle": "Log Status Should successfully retrieve server's overall status",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.status(),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"memoryUsage\", \"cpuUsage\", \"upTime\"]);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2710a5ab-fce0-4ead-abe2-3460c315ba0e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2710a5ab-fce0-4ead-abe2-3460c315ba0e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "cb6fff8b-f297-47f1-807c-4d58d0c8af78",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve log data",
                "fullTitle": "Log Find Should successfully retrieve log data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.get(),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"info\"]);\n    expect(body.info).to.be.an('array');\n    expect(body.info).length.to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "80be9299-e181-4a85-960e-466d44dff16a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "80be9299-e181-4a85-960e-466d44dff16a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fe082779-5967-4c90-bdd9-2902c521bfb2",
            "title": "Flush",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully flush log data",
                "fullTitle": "Log Flush Should successfully flush log data",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.flush(),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"message\"]);\n    expect(body.message).to.equal(\"Logs flushed\");\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f06d7e19-bcf8-4182-bb51-90fa96db3c25",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f06d7e19-bcf8-4182-bb51-90fa96db3c25"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c8f9f1e0-fd0e-46ba-b6a9-5b62100c46a3",
        "title": "Schema",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "742041b6-177b-4c06-be9a-59820ba4b92a",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Schema Count Should successfully return a count value",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.schema.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5128f4d5-5959-4ace-a4b3-5a44647239e5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5128f4d5-5959-4ace-a4b3-5a44647239e5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ef541d93-55ea-4a93-bb59-6194df3491a7",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user data (public)",
                "fullTitle": "Schema Find Should successfully retrieve user data (public)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `schemaName=${dummyData.acm.create.successByObject.schemaName}`;\nsendRequest(url.schema.findPaginated(query),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    let sampleSchema = body.docs[0];\n    isSchema(sampleSchema);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e72d4b5b-cdc3-4de3-b201-5d0e88d49b82",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e72d4b5b-cdc3-4de3-b201-5d0e88d49b82"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9608383a-2acc-4b26-a0e4-22ab9801c5b8",
            "title": "Find Paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin paginated data",
                "fullTitle": "Schema Find Paginated Should successfully retrieve admin paginated data",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.schema.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c51f07e5-7c1f-4d53-bd4f-37c3e0a1103c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c51f07e5-7c1f-4d53-bd4f-37c3e0a1103c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4baeb908-854a-439a-ad9a-6f4a72264307",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Schema Update \"before all\" hook",
                "timedOut": false,
                "duration": 9,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    roleData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f8215f4b-aa27-4d1f-a7f3-cbc6738611df",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to update Schema (Schema does not exist)",
                "fullTitle": "Schema Update Should fail to update Schema (Schema does not exist)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"push\";\nlet query = `schemaName=noneExistent&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ed8a562c-64d3-4a94-8d90-e79d5fda922b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update Schema (Target not defined) ",
                "fullTitle": "Schema Update Should fail to update Schema (Target not defined) ",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cb60bfb3-da65-4cf2-84a1-f932fa5dc684",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update Schema (Operation not defined)",
                "fullTitle": "Schema Update Should fail to update Schema (Operation not defined)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7528692d-21d7-42a9-813c-7f31f001d82b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully add a new role to a method",
                "fullTitle": "Schema Update Should successfully add a new role to a method",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&target=${target}&operation=${operation}`;\nconsole.log(\"Request url : \", url.schema.update(query));\nconsole.log(\"Request body : \", [roleData.name]);\nsendRequest(url.schema.update(query),'put',[roleData.name],200,function (err, res) {\n    console.log(\"Schema push response : \", JSON.stringify(res.body));\n    let body = res.body;\n    expect(err).to.be.null;\n    isSchema(body, false);\n    expect(body.accessControl.read).to.contain(roleData.name);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b8fd9b9b-2b96-4759-a90a-30cef442157c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully remove a role from a method",
                "fullTitle": "Schema Update Should successfully remove a role from a method",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"pull\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isSchema(body, false);\n    expect(body.accessControl.read).to.not.contain(roleData.name);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "38dbfb4c-12a9-49ed-899d-a1a603f24575",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ed8a562c-64d3-4a94-8d90-e79d5fda922b",
              "cb60bfb3-da65-4cf2-84a1-f932fa5dc684",
              "7528692d-21d7-42a9-813c-7f31f001d82b",
              "b8fd9b9b-2b96-4759-a90a-30cef442157c",
              "38dbfb4c-12a9-49ed-899d-a1a603f24575"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 90,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "de4674d9-a35a-440a-8942-173b869d6a47",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove Schema",
                "fullTitle": "Schema Remove Should successfully remove Schema",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `schemaName=${dummyData.acm.create.successByObject.schemaName}`;\nsendRequest(url.schema.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b241aa0d-fc04-4823-8846-6f3afaca2b78",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b241aa0d-fc04-4823-8846-6f3afaca2b78"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c18e0e28-d0cd-4d68-8271-b03b7ac520c8",
        "title": "Socket",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "107bae6b-ffcc-4484-bc02-8feaf9001a1e",
            "title": "Log",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully receive streamed request logs.",
                "fullTitle": "Socket Log Should successfully receive streamed request logs.",
                "timedOut": false,
                "duration": 1052,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let socketURL = `http://0.0.0.0:${process.env.HTTP_PORT}`;\nlet options = {\n    transports: ['websocket'],\n    'force new connection': true\n};\n(()=>{\n    let execRequests = [];\n    for(let i=0; i<1; i++){\n        execRequests.push(function (callback) {\n            setTimeout(function () {\n                let deniedMethodOnObject = {\n                    service     : \"Service A\",\n                        ip          : \"172.16.1.41\",\n                        params      : null,\n                        path        : \"http://sample/route\",\n                        query       : null,\n                        secure      : true,\n                        xhr         : false,\n                        route       : \"http://sample/route\",\n                        method      : \"PUT\",\n                        body        : {sampleKey : \"sampleVal\"},\n                        objectId    : \"5cee7a0456f44a4e65b35532\",\n                        token       : \"wrong_token\"\n                };\n                sendRequest(url.token.validate(),'post',deniedMethodOnObject,200,function () {\n                    callback(null);\n                });\n            },500)\n        })\n    }\n    async.waterfall(execRequests);\n})();\nlet client = socketClient.connect(socketURL, options);\nclient.on('logs', function(data){\n    if(data){done();}\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9bf6dd74-f0ad-4df4-9bf2-2c69d1db2b31",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9bf6dd74-f0ad-4df4-9bf2-2c69d1db2b31"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1052,
            "root": false,
            "rootEmpty": false,
            "_timeout": 30000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}