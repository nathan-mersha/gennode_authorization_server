{
  "stats": {
    "suites": 51,
    "tests": 115,
    "passes": 113,
    "pending": 0,
    "failures": 2,
    "start": "2019-12-06T13:56:29.561Z",
    "end": "2019-12-06T13:56:34.233Z",
    "duration": 4672,
    "testsRegistered": 115,
    "passPercent": 98.3,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "afdddc43-87ad-4707-bb55-2797eb2651b5",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "99d9c10d-17b3-4a46-9c89-2d6aedf6c4c1",
        "title": "Token",
        "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "eb807873-980e-4e81-bb1f-3e32d78814ad",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to create token (Validation error)",
                "fullTitle": "Token Create Should fail to create token (Validation error)",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.create(),'post',dummyData.token.create.validationError,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9efbb8fe-9897-43db-a8a8-c3aabac78461",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully create token",
                "fullTitle": "Token Create Should successfully create token",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.create(),'post',dummyData.token.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isToken(body, true);\n    dummyData.token.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "11dc6437-0956-4840-9e22-e646d1c1620c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9efbb8fe-9897-43db-a8a8-c3aabac78461",
              "11dc6437-0956-4840-9e22-e646d1c1620c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 109,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "be52889e-8603-44ea-960f-03ba3ebf4906",
            "title": "Validate",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Token Validate \"before all\" hook",
                "timedOut": false,
                "duration": 73,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "console.log(\"Generating dummy data for tests.\");\nasync.waterfall([\n    requestToken,\n    updateAnyRole, // route to be accessed by all\n    updateAnyACM,\n    createUserRole,\n    createUserACM\n],function () {\n    done();\n});\n/**\n * @name            - Request token\n * @description     - Requests a new token by userId.\n * @param callback  - Callback function (error)\n */\nfunction requestToken(callback) {\n    sendRequest(url.token.create(),'post',{userId : userId},201,function (err,res) {\n        validateToken.allowedToBeAccessedByAny.token = res.body.token;\n        validateToken.allowedToBeAccessedByNone.token = res.body.token;\n        validateToken.allowedToPerformPUTByAny.token = res.body.token;\n        validateToken.deniedToPerformDELETEByAny.token = res.body.token;\n        validateToken.allowedToPerformPUTByUser.token = res.body.token;\n        validateToken.allowedToPerformPUTByUserOnUserRoute.token = res.body.token;\n        validateToken.allowedToPerformMethodDeniedRoute.token = res.body.token;\n        validateToken.deniedMethodOnObject.token = res.body.token;\n        validateToken.allowedToAccessRoute.token = res.body.token;\n        validateToken.notAllowedToAccessRoute.token = res.body.token;\n        validateToken.notAllowedToAccessMethodButRoute.token = res.body.token;\n        callback(null);\n    });\n}\n/**\n * @name            - Update any role\n * @description     - Updates role type 'any' to have access for the routes accessed by all\n * @param callback  - Callback function (error)\n */\nfunction updateAnyRole(callback) {\n    let updateData  = {accessRoutes : [\n            { route : route.accessedByAll, method : \"POST\"},\n            { route : route.accessedByAll, method : \"PUT\"},\n            { route : route.accessedByAll, method : \"GET\"}\n            ]};\n    sendRequest(url.role.update(\"name=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){callback(null);}\n    });\n}\n/**\n * @name            - Update any acm\n * @description     - Updates any acm role\n * @param callback  - Callback function (error)\n */\nfunction updateAnyACM(callback) {\n    let updateData = {\n        accessControl : {\n            read    : [performPUTOnObjectByAny],\n            update  : [performPUTOnObjectByAny]\n        }\n    };\n    sendRequest(url.acm.update(\"subject=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){callback(null);}\n    });\n}\n/**\n * @name            - Create user role\n * @description     - Create sample role with test user\n * @param callback  - Callback function (error)\n */\nfunction createUserRole(callback) {\n    let sampleRole = {\n        name            : \"Sample Privilege\",\n        description     : \"Sample description for the privilege\",\n        members         : [userId],\n        accessRoutes    : [\n            {route : route.accessedByUser, method : \"PUT\"}\n        ]\n    };\n    sendRequest(url.role.create(),'post',sampleRole,201,function (err,res) {\n        let body = res.body;\n        if(body._id){callback(null);}\n    });\n}\n/**\n * @name            - Create user acm\n * @description     - Creates custom user acm data.\n * @param callback  - Callback function (error)\n */\nfunction createUserACM(callback) {\n    let userACMData = {\n        subject : userId,\n        accessControl : {\n            update : [performPUTOnObjectByUser]\n        }\n    };\n    sendRequest(url.acm.create(),'post',userACMData,200,function (err,res) {\n        let body = res.body;\n        if(body._id){callback(null);}\n    });\n}",
                "err": {},
                "isRoot": false,
                "uuid": "f1fe97e8-0f9d-42c8-8494-34459623e5a8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Token Validate \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "// Roll back\nasync.waterfall([\n    removedAnyRoleUpdate,\n    removeAnyACMUpdate,\n    removeUserRole,\n    removeUserACM\n],function () {\n    console.log(\"Rollback completed.\")\n});\nfunction removedAnyRoleUpdate(cb) {\n    let updateData  = {accessRoutes : []};\n    sendRequest(url.role.update(\"name=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){cb(null);}\n    });\n}\nfunction removeAnyACMUpdate(cb) {\n    let updateData = {\n        accessControl : {\n            read    : [],\n            update  : []\n        }\n    };\n    sendRequest(url.acm.update(\"subject=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){cb(null);}\n    });\n}\nfunction removeUserRole(cb) {\n    let userRoleQuery = \"name=Sample Privilege\";\n    sendRequest(url.role.remove(userRoleQuery),'delete',null, 200, function (err, res) {\n        if(res.body.ok){cb(null);}\n    });\n}\nfunction removeUserACM(cb) {\n    let userACMQuery = `subject=${userId}`;\n    sendRequest(url.acm.remove(userACMQuery),'delete',null, 200, function (err, res) {\n        if(res.body.ok){cb(null);}\n    });\n}",
                "err": {},
                "isRoot": false,
                "uuid": "05f833ae-bff8-4ec9-81c8-d42584126646",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should fail to grant access (Body missing required fields)",
                "fullTitle": "Token Validate Should fail to grant access (Body missing required fields)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.missingRequiredFields,400,function (err,res) {\n    let body = res.body;\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode); // Validation error\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4b8608a7-27fe-404b-87df-95a72ea5a30d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (Route is allowed to be accessed by anyone)",
                "fullTitle": "Token Validate Should successfully grant access (Route is allowed to be accessed by anyone)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToBeAccessedByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "01a3eaa3-fc35-4196-a114-fbd27772d31b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (Token has expired)",
                "fullTitle": "Token Validate Should fail to grant access (Token has expired)",
                "timedOut": false,
                "duration": 2033,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let tokenExpirationTimeCopy = process.env.TOKEN_EXPIRATION_TIME;\nprocess.env.TOKEN_EXPIRATION_TIME = \"1000\"; // Change token expiration time to one second.\nasync.waterfall([\n    createAToken,\n    validateExpToken,\n    rollBackExpirationTime\n],function () {\n    done();\n});\n/**\n * @name            - Create token\n * @description     - Creates a new token for user by 1sec expiration time\n * @param cb        - Callback function (error, response)\n */\nfunction createAToken(cb) {\n    sendRequest(url.token.create(),'post',{userId : userId},201,function (err,res) { // Create token\n        cb(null, res);\n    });\n}\n/**\n * @name            - Validate Exp token\n * @description     - Validation an expired token after 2sec (1 sec safe threshold)\n * @param res       - Token data response object\n * @param cb        - Callback function (error)\n */\nfunction validateExpToken(res, cb) {\n    validateToken.toExpireAfterOneSec.token = res.body.token;\n    setTimeout(function () {\n        sendRequest(url.token.validate(),'post',validateToken.toExpireAfterOneSec,401,function (err,res) {\n            let body = res.body;\n            expect(body.message).to.equal(message.ACCESS_DENIED);\n            cb(null);\n        });\n    },2000);\n}\n/**\n * @name            - Roll back expiration time\n * @description     - Rolls back expiration time to whatever was set on the process env before the test.\n * @param cb        - Callback function (error)\n */\nfunction rollBackExpirationTime(cb) {\n    process.env.TOKEN_EXPIRATION_TIME = tokenExpirationTimeCopy;\n    cb(null);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "cc354552-21c3-4181-9aa3-c4ac3ea006eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (Group 'any' is allowed to perform operation on object)",
                "fullTitle": "Token Validate Should successfully grant access (Group 'any' is allowed to perform operation on object)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3f3dde14-cac1-4375-9005-adedce22c1f1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully deny access (Group 'any' is not allowed to perform operation on object)",
                "fullTitle": "Token Validate Should successfully deny access (Group 'any' is not allowed to perform operation on object)",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.deniedToPerformDELETEByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "beab2374-6b4d-4935-bada-c851f6c7d519",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to perform method on object, with all access of route)",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to perform method on object, with all access of route)",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByUser,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3ae174be-aecf-463b-bd5c-1106fe808af0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to perform method on object, with only user access route)",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to perform method on object, with only user access route)",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByUserOnUserRoute,200,function (err,res) {\n                        let body = res.body;\n                        expect(body.message).to.equal(message.ACCESS_GRANTED);\n                        done();\n                    });",
                "err": {},
                "isRoot": false,
                "uuid": "0d761d6c-bc3d-4fed-a1b6-5eee24f7efa5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to access route+method, no object access (RUD) is requested )",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to access route+method, no object access (RUD) is requested )",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToAccessRoute,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "88c9a3dc-6a41-4003-8d03-f0ea32984be3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User is not allowed to access route+method) ",
                "fullTitle": "Token Validate Should fail to grant access (User is not allowed to access route+method) ",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.notAllowedToAccessRoute,400,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b804af0b-d844-4cdc-b243-26badea9ea13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User is not allowed to access method but route)",
                "fullTitle": "Token Validate Should fail to grant access (User is not allowed to access method but route)",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.notAllowedToAccessMethodButRoute,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0f9c8385-5df3-4467-95ed-935db7bdd5b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User allowed to perform method on object and denied route.)",
                "fullTitle": "Token Validate Should fail to grant access (User allowed to perform method on object and denied route.)",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformMethodDeniedRoute,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "df18dc01-1acd-4b7a-ac25-3df1cc0063ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User or 'any' group is denied to perform method on object)",
                "fullTitle": "Token Validate Should fail to grant access (User or 'any' group is denied to perform method on object)",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.deniedMethodOnObject,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1b90bc70-0411-4013-ae86-be0732252bda",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4b8608a7-27fe-404b-87df-95a72ea5a30d",
              "01a3eaa3-fc35-4196-a114-fbd27772d31b",
              "cc354552-21c3-4181-9aa3-c4ac3ea006eb",
              "3f3dde14-cac1-4375-9005-adedce22c1f1",
              "beab2374-6b4d-4935-bada-c851f6c7d519",
              "3ae174be-aecf-463b-bd5c-1106fe808af0",
              "0d761d6c-bc3d-4fed-a1b6-5eee24f7efa5",
              "88c9a3dc-6a41-4003-8d03-f0ea32984be3",
              "b804af0b-d844-4cdc-b243-26badea9ea13",
              "0f9c8385-5df3-4467-95ed-935db7bdd5b9",
              "df18dc01-1acd-4b7a-ac25-3df1cc0063ab",
              "1b90bc70-0411-4013-ae86-be0732252bda"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2198,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c6cd971f-7ce8-44ad-8664-54852e4fcccf",
        "title": "Service",
        "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fcc8401a-b8e0-4736-8704-d5be7f154508",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create service",
                "fullTitle": "Service Create Should successfully create service",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body, true);\n    dummyData.service.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "44590188-39b7-43c6-80b6-8fad2d06f38c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create service (Method and route fields missing)",
                "fullTitle": "Service Create Should fail to create service (Method and route fields missing)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "48a41267-ca03-4b4c-a3ac-15b2191523c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create service (Method is not http method)",
                "fullTitle": "Service Create Should fail to create service (Method is not http method)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8d65dee4-363b-425e-8733-b02dc2df48db",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "44590188-39b7-43c6-80b6-8fad2d06f38c",
              "48a41267-ca03-4b4c-a3ac-15b2191523c0",
              "8d65dee4-363b-425e-8733-b02dc2df48db"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 56,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d8a893e0-8b41-4ff6-8624-50a22272d377",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve service data (public)",
                "fullTitle": "Service Find Should successfully retrieve service data (public)",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPublic(dummyData.service.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.service.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b2d28fde-277f-486d-9b27-06e4a57c1986",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve service data (private)",
                "fullTitle": "Service Find Should successfully retrieve service data (private)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPrivate(dummyData.service.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.service.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c89d6319-5975-45f5-83f2-9f0ffcc9ec25",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve service data ( Id wrong format )",
                "fullTitle": "Service Find Should fail to retrieve service data ( Id wrong format )",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPublic(dummyData.service.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "258bca09-03c1-4874-acf0-cca655eab6d8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b2d28fde-277f-486d-9b27-06e4a57c1986",
              "c89d6319-5975-45f5-83f2-9f0ffcc9ec25",
              "258bca09-03c1-4874-acf0-cca655eab6d8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 36,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f01dd1ae-f70d-4c70-becc-629db5f97826",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve service paginated data",
                "fullTitle": "Service Find paginated Should successfully retrieve service paginated data",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "12b43b28-914a-4250-bb9d-c42784fc8f64",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "12b43b28-914a-4250-bb9d-c42784fc8f64"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "242e14f0-5f25-47c9-aae8-cb1334f46d1b",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Service Count Should successfully return a count value",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e25fefff-9589-419f-a62f-d14c73e2b187",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e25fefff-9589-419f-a62f-d14c73e2b187"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "90122a0d-2936-45cb-bce9-04f4878d0817",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Service Update \"before all\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body, true);\n    serviceData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "535ba098-7e9c-4edc-8845-99672177e636",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Service Update \"after all\" hook",
                "timedOut": false,
                "duration": 5,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}`;\nsendRequest(url.service.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "046d87af-5ca3-4a0a-8a88-574b965b032b",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update service data",
                "fullTitle": "Service Update Should successfully update service data",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.update(query),'put',dummyData.service.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "145cc31c-19ed-4659-8082-651ba4143fd5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "Service Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.service.update(query),'put',dummyData.service.update.success,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3506be38-a62c-4cde-a755-226052852535",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update service data (Invalid update data)",
                "fullTitle": "Service Update Should fail to update service data (Invalid update data)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.update(query),'put',dummyData.service.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "36c507dd-a78e-4f21-862c-1a03f2e07259",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Service Update Should successfully push items to target",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).excluding('_id').to.include(... update.success.data);\n    done();\n});",
                "err": {
                  "message": "AssertionError: [object Object]: expected [ Array(5) ] to include { method: 'POST',\n  route: 'http://test/sample',\n  group: 'Company',\n  name: 'Create company',\n  description: 'Create company data.' }",
                  "estack": "AssertionError: [object Object]: expected [ Array(5) ] to include { method: 'POST',\n  route: 'http://test/sample',\n  group: 'Company',\n  name: 'Create company',\n  description: 'Create company data.' }\n    at Test.<anonymous> (test/test.js:878:65)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at Server.localAssert (node_modules/supertest/lib/test.js:131:12)\n    at emitCloseNT (net.js:1619:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "e97044ac-f835-4a74-8889-b6534d759f86",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Service Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).excluding('_id').to.include(...update.success.data);\n    let responseArray = body.routes;\n    helper.removeChildFromParent(responseArray, update.success.data);\n    expect(responseArray).to.not.include(...update.success.data);\n    done();\n});",
                "err": {
                  "message": "AssertionError: [object Object]: expected [ Array(7) ] to include { method: 'POST',\n  route: 'http://test/sample',\n  group: 'Company',\n  name: 'Create company',\n  description: 'Create company data.' }",
                  "estack": "AssertionError: [object Object]: expected [ Array(7) ] to include { method: 'POST',\n  route: 'http://test/sample',\n  group: 'Company',\n  name: 'Create company',\n  description: 'Create company data.' }\n    at Test.<anonymous> (test/test.js:889:65)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at Server.localAssert (node_modules/supertest/lib/test.js:131:12)\n    at emitCloseNT (net.js:1619:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "d48d7ced-17ff-4ae8-b1f4-70fc604d4cf1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Service Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b4cbc94e-4a50-413f-9757-f16d8de9219c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Service Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "65691b01-eeee-4bc1-bd6b-ec1d00ab7aae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Service Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=notFound&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a0a6b302-417c-473b-89ed-b868ff3422db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Service Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=notFound&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fb845339-1465-4e6a-a04e-f99fc3d1aa14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Service Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "81308a98-1d4f-4b05-a733-26813221e344",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "145cc31c-19ed-4659-8082-651ba4143fd5",
              "3506be38-a62c-4cde-a755-226052852535",
              "36c507dd-a78e-4f21-862c-1a03f2e07259",
              "b4cbc94e-4a50-413f-9757-f16d8de9219c",
              "65691b01-eeee-4bc1-bd6b-ec1d00ab7aae",
              "a0a6b302-417c-473b-89ed-b868ff3422db",
              "fb845339-1465-4e6a-a04e-f99fc3d1aa14",
              "81308a98-1d4f-4b05-a733-26813221e344"
            ],
            "failures": [
              "e97044ac-f835-4a74-8889-b6534d759f86",
              "d48d7ced-17ff-4ae8-b1f4-70fc604d4cf1"
            ],
            "pending": [],
            "skipped": [],
            "duration": 62,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5ccc2886-68d6-4b32-925e-493c8520e021",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove service data",
                "fullTitle": "Service Remove Should successfully remove service data",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0909162d-828d-4c97-8777-c09f0fc250df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove service data. (Query not provided)",
                "fullTitle": "Service Remove Should fail to remove service data. (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.service.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4ed2ecb8-2c04-4fd5-9ff6-9281b649f0c6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0909162d-828d-4c97-8777-c09f0fc250df",
              "4ed2ecb8-2c04-4fd5-9ff6-9281b649f0c6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "48349724-4792-4255-a61d-ad5b2203fd42",
        "title": "User",
        "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "41df4cb3-1465-4c96-a3b8-6eb11ffb8625",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create user",
                "fullTitle": "User Create Should successfully create user",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.create(),'post',dummyData.user.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUser(body, true);\n    dummyData.user.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "33fefc58-a2e6-4ad7-9ad2-fad0943adcd9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create user (Required field missing)",
                "fullTitle": "User Create Should fail to create user (Required field missing)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.create(),'post',dummyData.user.create.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c1b675a6-efef-42f4-8e87-0d430866de02",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "33fefc58-a2e6-4ad7-9ad2-fad0943adcd9",
              "c1b675a6-efef-42f4-8e87-0d430866de02"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8022cc00-e8e2-4d85-bbd5-e657cf14cdaf",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user data (public)",
                "fullTitle": "User Find Should successfully retrieve user data (public)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPublic(dummyData.user.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.user.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e0fd2b86-5db4-413a-851d-cc7e72af3dcb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve user data (private)",
                "fullTitle": "User Find Should successfully retrieve user data (private)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPrivate(dummyData.user.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.user.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "505fe897-a895-4ca8-a240-20c345a338c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve user data ( Id wrong format )",
                "fullTitle": "User Find Should fail to retrieve user data ( Id wrong format )",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPublic(dummyData.user.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d3a979b7-3857-4b7a-b436-e756e38757b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e0fd2b86-5db4-413a-851d-cc7e72af3dcb",
              "505fe897-a895-4ca8-a240-20c345a338c0",
              "d3a979b7-3857-4b7a-b436-e756e38757b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "861cef67-24ba-4253-93fd-fea89871b911",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user paginated data",
                "fullTitle": "User Find paginated Should successfully retrieve user paginated data",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "09978b70-d6c4-4ba5-b0a5-de59c48b6d68",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "09978b70-d6c4-4ba5-b0a5-de59c48b6d68"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e542a2b8-6f5c-45f9-9c9a-74d0bbbde970",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "User Count Should successfully return a count value",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "26e900b9-0bf7-4cd3-a758-c86743d97838",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "26e900b9-0bf7-4cd3-a758-c86743d97838"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7c5eafd9-e54c-4309-a6d2-3d76fb1dbe38",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update user data",
                "fullTitle": "User Update Should successfully update user data",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.update(query),'put',dummyData.user.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fa7c4bf0-6f8c-4077-8b3f-0dcc15623a58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "User Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.user.update(query),'put',dummyData.user.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a6eda149-2e11-4dd4-a273-7ef98b231ac5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update user data (Invalid update data)",
                "fullTitle": "User Update Should fail to update user data (Invalid update data)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.update(query),'put',dummyData.user.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "be63cf36-272a-491a-b880-919661b52906",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fa7c4bf0-6f8c-4077-8b3f-0dcc15623a58",
              "a6eda149-2e11-4dd4-a273-7ef98b231ac5",
              "be63cf36-272a-491a-b880-919661b52906"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "421513c5-dd06-4fe8-a5a8-f01f1bf48737",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove user data",
                "fullTitle": "User Remove Should successfully remove user data",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "470a46d4-4dd6-4c98-bd90-e7a03762df02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove user data. (Query not provided)",
                "fullTitle": "User Remove Should fail to remove user data. (Query not provided)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.user.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ee6bca1e-e9a4-4fe8-88d4-3dd0720e041b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "470a46d4-4dd6-4c98-bd90-e7a03762df02",
              "ee6bca1e-e9a4-4fe8-88d4-3dd0720e041b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7f4aa0ee-7ef4-4f91-b5b2-d2b2751b7b18",
        "title": "Role",
        "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7aa0d287-1a55-44c1-ba66-8693146dc9af",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create role",
                "fullTitle": "Role Create Should successfully create role",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    dummyData.role.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9600bf1c-62c7-4de8-aa1c-f396c0ffe16d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create role (Required field missing)",
                "fullTitle": "Role Create Should fail to create role (Required field missing)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.missingRequiredFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5e0009dc-2b81-427f-b847-1cea933ec494",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create route (Unknown Http method)",
                "fullTitle": "Role Create Should fail to create route (Unknown Http method)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.invalidMethod,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2c78ce6f-a4c2-41da-847a-9a882c7f682a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9600bf1c-62c7-4de8-aa1c-f396c0ffe16d",
              "5e0009dc-2b81-427f-b847-1cea933ec494",
              "2c78ce6f-a4c2-41da-847a-9a882c7f682a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 32,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "75d3f7f7-d09c-4342-8a3e-791a87797935",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve role data (public)",
                "fullTitle": "Role Find Should successfully retrieve role data (public)",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPublic(dummyData.role.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.role.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b6c029fb-b323-4e52-8617-d9edcecf8df6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve role data (private)",
                "fullTitle": "Role Find Should successfully retrieve role data (private)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPrivate(dummyData.role.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.role.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5fc884e5-6570-4907-8520-ccdf0ec8797d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve role data ( Id wrong format )",
                "fullTitle": "Role Find Should fail to retrieve role data ( Id wrong format )",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPublic(dummyData.role.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "111ad1da-fe1c-4608-abd8-7b62e649d4ac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b6c029fb-b323-4e52-8617-d9edcecf8df6",
              "5fc884e5-6570-4907-8520-ccdf0ec8797d",
              "111ad1da-fe1c-4608-abd8-7b62e649d4ac"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "899b1c5e-0136-45c1-b7ab-d9dfc12122a1",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve role paginated data",
                "fullTitle": "Role Find paginated Should successfully retrieve role paginated data",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "00136618-55a9-4639-a395-4c932a06a0d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "00136618-55a9-4639-a395-4c932a06a0d5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "75f63f30-9926-4a0d-bcdd-991375ea3a10",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Role Count Should successfully return a count value",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cae3a062-d381-4b60-97c1-d1968076b70d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cae3a062-d381-4b60-97c1-d1968076b70d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9d2b4523-3317-43df-a586-86fc8256761e",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Role Update \"before all\" hook",
                "timedOut": false,
                "duration": 10,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    roleData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "929c3c85-6d25-4ffb-bc5d-aa4dcb771b8a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Role Update \"after all\" hook",
                "timedOut": false,
                "duration": 4,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}`;\nsendRequest(url.role.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c1c392dc-d82b-43ec-b06e-0ca13169d838",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update role data",
                "fullTitle": "Role Update Should successfully update role data",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.update(query),'put',dummyData.role.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c27934a3-8fb3-44fb-b52f-f9159dea9478",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update role data (Query not provided)",
                "fullTitle": "Role Update Should fail to update role data (Query not provided)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.role.update(query),'put',dummyData.role.update.success,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b0a56587-816a-4fa2-8e80-3e27affc4cc8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update role data (Invalid update data)",
                "fullTitle": "Role Update Should fail to update role data (Invalid update data)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.update(query),'put',dummyData.role.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "52e084b8-c1ec-49a3-9c33-d93de99460c5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Role Update Should successfully push items to target",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    (function () {\n        body.accessRoutes.forEach(function (accessRoute) {\n            delete accessRoute._id;\n        })\n    })();\n    expect(body.accessRoutes).to.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5f6ed1bb-9862-4ef0-aba9-ad72d0db11cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Role Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    (function () {\n        body.accessRoutes.forEach(function (accessRoute) {\n            delete accessRoute._id;\n        })\n    })();\n    expect(body.accessRoutes).to.include(...update.success.data);\n    let responseArray = body.accessRoutes;\n    helper.removeChildFromParent(responseArray, update.success.data);\n    expect(responseArray).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e939eea1-9e87-4617-bf4b-2a09e36dbb8e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Role Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    expect(body.accessRoutes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "876746c4-3489-4361-99cb-44ac367ae867",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Role Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    expect(body.accessRoutes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fd2e6e36-1420-44f0-a1dd-00379503ab02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Role Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=notFound&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a8c99d0d-bfcf-4438-8e87-05a011e89a0f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Role Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=notFound&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "20dde536-b843-4190-86a8-aed4a255d96f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Role Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "30660754-c1db-457d-9e1a-b1ede53d8cad",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c27934a3-8fb3-44fb-b52f-f9159dea9478",
              "b0a56587-816a-4fa2-8e80-3e27affc4cc8",
              "52e084b8-c1ec-49a3-9c33-d93de99460c5",
              "5f6ed1bb-9862-4ef0-aba9-ad72d0db11cb",
              "e939eea1-9e87-4617-bf4b-2a09e36dbb8e",
              "876746c4-3489-4361-99cb-44ac367ae867",
              "fd2e6e36-1420-44f0-a1dd-00379503ab02",
              "a8c99d0d-bfcf-4438-8e87-05a011e89a0f",
              "20dde536-b843-4190-86a8-aed4a255d96f",
              "30660754-c1db-457d-9e1a-b1ede53d8cad"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 78,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "e4198fd5-146f-4426-890c-ce3270f97825",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove role data",
                "fullTitle": "Role Remove Should successfully remove role data",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "82bd4ec9-729e-4e87-85fe-cfa0f03d3ba9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove role data (Query not provided)",
                "fullTitle": "Role Remove Should fail to remove role data (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.role.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "294d2c8b-5cf0-484f-b017-9b9a87e69912",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "82bd4ec9-729e-4e87-85fe-cfa0f03d3ba9",
              "294d2c8b-5cf0-484f-b017-9b9a87e69912"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f555c400-0dcb-4b7b-8fa9-c0efa03c66a3",
        "title": "Acm",
        "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0d0b9661-e0d4-49ae-8008-634bc5491dce",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create acm",
                "fullTitle": "Acm Create Should successfully create acm",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true);\n    dummyData.acm.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "01979dc6-051e-4197-aed7-2f0a4fb5e1ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully create acm (By Object)",
                "fullTitle": "Acm Create Should successfully create acm (By Object)",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(\"object\"),'post',dummyData.acm.create.successByObject,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true, \"object\");\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3064dea2-9546-41d8-86d9-ff22b8033eb3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create acm (Required field missing)",
                "fullTitle": "Acm Create Should fail to create acm (Required field missing)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b40b82f0-6b54-4b7e-9b11-d6f7b74ff333",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create acm (Required field missing, By Object)",
                "fullTitle": "Acm Create Should fail to create acm (Required field missing, By Object)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(\"object\"),'post',dummyData.acm.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "59451b5d-bef7-4710-a0da-ef68a263153a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "01979dc6-051e-4197-aed7-2f0a4fb5e1ad",
              "3064dea2-9546-41d8-86d9-ff22b8033eb3",
              "b40b82f0-6b54-4b7e-9b11-d6f7b74ff333",
              "59451b5d-bef7-4710-a0da-ef68a263153a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 44,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c398578c-05a1-4bd2-bc12-a3fec1c1c684",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve acm data (public)",
                "fullTitle": "Acm Find Should successfully retrieve acm data (public)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPublic(dummyData.acm.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.acm.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "edbdea47-33b2-494a-91ba-8bac8cd60714",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve acm data (private)",
                "fullTitle": "Acm Find Should successfully retrieve acm data (private)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPrivate(dummyData.acm.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.acm.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9d20c9a5-355a-49d9-8712-d641f823454b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve acm data ( Id wrong format )",
                "fullTitle": "Acm Find Should fail to retrieve acm data ( Id wrong format )",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPublic(dummyData.acm.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b90bcec7-d428-4cf7-be46-7df5c1596c4d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "edbdea47-33b2-494a-91ba-8bac8cd60714",
              "9d20c9a5-355a-49d9-8712-d641f823454b",
              "b90bcec7-d428-4cf7-be46-7df5c1596c4d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 32,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1e281a54-5a33-4cdb-b4c8-1117b7cd8340",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve acm paginated data",
                "fullTitle": "Acm Find paginated Should successfully retrieve acm paginated data",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "de6da7f5-5e4c-4258-af8e-dd4bd7a257c1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "de6da7f5-5e4c-4258-af8e-dd4bd7a257c1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f4a56112-5b07-4a18-83f2-ccc42c3556a6",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Acm Count Should successfully return a count value",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ea3ae2b6-35c8-4654-9038-422e88a88980",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ea3ae2b6-35c8-4654-9038-422e88a88980"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "da606992-da2c-4e0f-92fa-42e2b2db9c36",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Acm Update \"before all\" hook",
                "timedOut": false,
                "duration": 34,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true);\n    acmData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f21a2e5b-af65-4026-96ac-3e6ad1bdceb9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Acm Update \"after all\" hook",
                "timedOut": false,
                "duration": 4,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}`;\nsendRequest(url.acm.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "84fff515-c7aa-49b5-99fe-0a02cba94678",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update acm data",
                "fullTitle": "Acm Update Should successfully update acm data",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body);\n    expect(body.nModified).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c1fa14d5-94c1-4755-8343-a7590e63498d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update acm data (Query not provided)",
                "fullTitle": "Acm Update Should fail to update acm data (Query not provided)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "12ab7ebc-b697-497f-aeed-bf340a3f3389",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update acm data (Invalid update data)",
                "fullTitle": "Acm Update Should fail to update acm data (Invalid update data)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7381baa1-3ae7-4b92-b13a-62367f81c3df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Acm Update Should successfully push items to target",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "29b0a3ac-1166-4dc3-89d5-2c98d6869718",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Acm Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.include.members(update.success.data);\n    let responseArray = body.accessControl.read;\n    delete responseArray[responseArray.indexOf(update.success.data[0])];\n    delete responseArray[responseArray.indexOf(update.success.data[1])];\n    expect(responseArray).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ac1f19e5-fedd-48ee-8647-db55077f705f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Acm Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4fac9a1d-6f80-4b28-9972-f5f214d0b478",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Acm Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ad14396c-4b43-403d-af76-b05d4b64ac02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Acm Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.notFound&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "80678205-3704-4e6c-9a9b-df6d9f69b7bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Acm Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.notFound&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "26a3b482-4d24-41cf-8482-10e2aab53c3a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Acm Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "df7755f0-4a4d-4fc0-95dc-d06b665b1e09",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c1fa14d5-94c1-4755-8343-a7590e63498d",
              "12ab7ebc-b697-497f-aeed-bf340a3f3389",
              "7381baa1-3ae7-4b92-b13a-62367f81c3df",
              "29b0a3ac-1166-4dc3-89d5-2c98d6869718",
              "ac1f19e5-fedd-48ee-8647-db55077f705f",
              "4fac9a1d-6f80-4b28-9972-f5f214d0b478",
              "ad14396c-4b43-403d-af76-b05d4b64ac02",
              "80678205-3704-4e6c-9a9b-df6d9f69b7bf",
              "26a3b482-4d24-41cf-8482-10e2aab53c3a",
              "df7755f0-4a4d-4fc0-95dc-d06b665b1e09"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 79,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "87a41a4a-a226-46c5-9910-8fa37bdf3714",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove acm data",
                "fullTitle": "Acm Remove Should successfully remove acm data",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f0b7b2dc-ffef-45a2-b16d-bdbaa72b9649",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove acm data (Query not provide)",
                "fullTitle": "Acm Remove Should fail to remove acm data (Query not provide)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.acm.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "203ee5e1-7e11-450d-a6aa-8f14b9fcf761",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f0b7b2dc-ffef-45a2-b16d-bdbaa72b9649",
              "203ee5e1-7e11-450d-a6aa-8f14b9fcf761"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5c50df39-b5d7-47cd-acf9-13cc120e1da1",
        "title": "Admin",
        "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "57413037-bb32-41d7-af45-12211da39b11",
            "title": "SignUp",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully signup Admin",
                "fullTitle": "Admin SignUp Should successfully signup Admin",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.signup(),'post',adminSignUp,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAdmin(body, true);\n    dummyData.admin.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a12e2a0a-ee30-4bbd-9cd5-475365c8c3ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to signup (Validate error)",
                "fullTitle": "Admin SignUp Should fail to signup (Validate error)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.signup(),'post',dummyData.admin.signup.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dad3b98c-8607-4441-acde-50a6bd087631",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to signup (UserName exists)",
                "fullTitle": "Admin SignUp Should fail to signup (UserName exists)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Fails because the exact test have been done before.\nsendRequest(url.admin.signup(),'post',dummyData.admin.signup.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.AUT.USERNAME_EXISTS.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "84b9d57a-d359-45bb-bdea-ec2f87309421",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a12e2a0a-ee30-4bbd-9cd5-475365c8c3ff",
              "dad3b98c-8607-4441-acde-50a6bd087631",
              "84b9d57a-d359-45bb-bdea-ec2f87309421"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 78,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ef38b779-b06c-448d-b5a5-8e33b8db5e89",
            "title": "Login",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to login (Wrong credential)",
                "fullTitle": "Admin Login Should fail to login (Wrong credential)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',dummyData.admin.signup.wrongCredential,401,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.AUT.UNAUTHORIZED_ACCESS.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1d0c6d59-2b2d-4bb9-82f7-2b49882b6bc2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to login (Missing fields)",
                "fullTitle": "Admin Login Should fail to login (Missing fields)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',dummyData.admin.signup.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "616dba37-85d3-4705-a3c1-b22e7ef3cbc2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully login Admin",
                "fullTitle": "Admin Login Should successfully login Admin",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',adminSignUp,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('token');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d5a6b7e5-1a86-4708-9564-e8f30504e2c7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1d0c6d59-2b2d-4bb9-82f7-2b49882b6bc2",
              "616dba37-85d3-4705-a3c1-b22e7ef3cbc2",
              "d5a6b7e5-1a86-4708-9564-e8f30504e2c7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 40,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b0c825a2-133f-40ca-941b-5d15bce3cd1f",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Admin Count Should successfully return a count value",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8c3bb25e-fa5f-424d-909f-cd9e88c2afeb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8c3bb25e-fa5f-424d-909f-cd9e88c2afeb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "aabb5067-dc2b-4c32-b4a6-8794e97ea97e",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin data",
                "fullTitle": "Admin Find Should successfully retrieve admin data",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findByIdPrivate(dummyData.admin.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.admin.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "755819bd-f490-4289-a0c1-0203adb4737c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve admin data ( Id wrong format )",
                "fullTitle": "Admin Find Should fail to retrieve admin data ( Id wrong format )",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findByIdPrivate(dummyData.admin.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9091dddb-7cde-449d-8356-a396e9fd8d9c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "755819bd-f490-4289-a0c1-0203adb4737c",
              "9091dddb-7cde-449d-8356-a396e9fd8d9c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6754ec52-e126-45e6-bf1a-6dbdf6f4bb67",
            "title": "Find Paginated",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin paginated data",
                "fullTitle": "Admin Find Paginated Should successfully retrieve admin paginated data",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4c3285a0-fc8a-4dfb-bb57-41d9ea912137",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4c3285a0-fc8a-4dfb-bb57-41d9ea912137"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "74cd92a5-f8c3-4e9c-9270-342c199f0300",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update admin data",
                "fullTitle": "Admin Update Should successfully update admin data",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body);\n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "206326f8-a221-487f-8915-8c87e87348f5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "Admin Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "04a9a76b-b381-4cf3-badf-58886f9e2398",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update admin data (Invalid update data)",
                "fullTitle": "Admin Update Should fail to update admin data (Invalid update data)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "53e58f6d-103e-4cc7-bdaf-158704d9d046",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "206326f8-a221-487f-8915-8c87e87348f5",
              "04a9a76b-b381-4cf3-badf-58886f9e2398",
              "53e58f6d-103e-4cc7-bdaf-158704d9d046"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "23f4982f-f737-483a-bf16-a0d930e2741a",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove admin data",
                "fullTitle": "Admin Remove Should successfully remove admin data",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "697bb4b2-5c88-4b33-9cbc-37ebd8d8d4ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove admin data. (Query not provided)",
                "fullTitle": "Admin Remove Should fail to remove admin data. (Query not provided)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.admin.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ed5cd961-c728-4caa-b549-1ba8d0777e0b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "697bb4b2-5c88-4b33-9cbc-37ebd8d8d4ee",
              "ed5cd961-c728-4caa-b549-1ba8d0777e0b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "feb006f7-afd1-4ecf-bc17-eba46cd73be9",
        "title": "Log",
        "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1a005338-2f95-4ede-94d1-b2ed08f462a7",
            "title": "Status",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve server's overall status",
                "fullTitle": "Log Status Should successfully retrieve server's overall status",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.status(),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"memoryUsage\", \"cpuUsage\", \"upTime\"]);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9e6ddefc-e37d-4c9b-8607-f15847223767",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9e6ddefc-e37d-4c9b-8607-f15847223767"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e571b675-9dab-48c4-b641-58e1c263c7ed",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve log data",
                "fullTitle": "Log Find Should successfully retrieve log data",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.get(),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"info\"]);\n    expect(body.info).to.be.an('array');\n    expect(body.info).length.to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "626d06a8-18ee-4297-92d0-a28a28a770e2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "626d06a8-18ee-4297-92d0-a28a28a770e2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a95ea340-9f8b-4a1a-9e71-1c57b781b45a",
            "title": "Flush",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully flush log data",
                "fullTitle": "Log Flush Should successfully flush log data",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.flush(),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"message\"]);\n    expect(body.message).to.equal(\"Logs flushed\");\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e35c1645-fc44-4a6e-8fb8-63ee5627e2cf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e35c1645-fc44-4a6e-8fb8-63ee5627e2cf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b8018b74-f6a8-4324-a876-acab32baef66",
        "title": "Schema",
        "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9e598239-fb68-4dbd-bf29-64fb80ca3229",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Schema Count Should successfully return a count value",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.schema.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c68a31ea-65cb-4f72-9ec5-e568438199b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c68a31ea-65cb-4f72-9ec5-e568438199b5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "79b6d6fb-a386-429f-9919-c5a72d1e756a",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user data (public)",
                "fullTitle": "Schema Find Should successfully retrieve user data (public)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `schemaName=${dummyData.acm.create.successByObject.schemaName}`;\nsendRequest(url.schema.findPaginated(query),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    let sampleSchema = body.docs[0];\n    isSchema(sampleSchema);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3ffd7bcf-63ca-4507-a267-3ebfba47c598",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3ffd7bcf-63ca-4507-a267-3ebfba47c598"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c88da9d6-e71b-4ed2-ba72-84901fc9303f",
            "title": "Find Paginated",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin paginated data",
                "fullTitle": "Schema Find Paginated Should successfully retrieve admin paginated data",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.schema.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4d29e055-195d-42a2-b393-c762a7502790",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4d29e055-195d-42a2-b393-c762a7502790"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "11141df8-18e5-4b86-8d1e-d5b2db9537c4",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Schema Update \"before all\" hook",
                "timedOut": false,
                "duration": 16,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    roleData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1001ee3a-12cf-4beb-9e77-889f321dc215",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to update Schema (Schema does not exist)",
                "fullTitle": "Schema Update Should fail to update Schema (Schema does not exist)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"push\";\nlet query = `schemaName=noneExistent&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7bc66dad-e5e8-4e02-9044-cd7b06aa7cee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update Schema (Target not defined) ",
                "fullTitle": "Schema Update Should fail to update Schema (Target not defined) ",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "051fe0ba-06f0-4520-b4fc-94735a00cfd3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update Schema (Operation not defined)",
                "fullTitle": "Schema Update Should fail to update Schema (Operation not defined)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b8debcfd-6bdd-4977-ba71-110dca9ffbae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully add a new role to a method",
                "fullTitle": "Schema Update Should successfully add a new role to a method",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],200,function (err, res) {\n    console.log(\"Schema push response : \", JSON.stringify(res.body));\n    let body = res.body;\n    expect(err).to.be.null;\n    isSchema(body, false);\n    expect(body.accessControl.read).to.contain(roleData.name);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f1be61da-0071-41fe-b80a-31ab32ab3810",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully remove a role from a method",
                "fullTitle": "Schema Update Should successfully remove a role from a method",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"pull\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isSchema(body, false);\n    expect(body.accessControl.read).to.not.contain(roleData.name);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "989e6dc5-22c3-421a-99f9-5b6092faeec1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7bc66dad-e5e8-4e02-9044-cd7b06aa7cee",
              "051fe0ba-06f0-4520-b4fc-94735a00cfd3",
              "b8debcfd-6bdd-4977-ba71-110dca9ffbae",
              "f1be61da-0071-41fe-b80a-31ab32ab3810",
              "989e6dc5-22c3-421a-99f9-5b6092faeec1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 66,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1616b54f-32ae-469f-8a7f-ca4772810f32",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove Schema",
                "fullTitle": "Schema Remove Should successfully remove Schema",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `schemaName=${dummyData.acm.create.successByObject.schemaName}`;\nsendRequest(url.schema.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a0d7730d-db8b-404e-ba9a-0e824b4d8c97",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a0d7730d-db8b-404e-ba9a-0e824b4d8c97"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5953e318-c375-46e7-bbcd-030309bed72f",
        "title": "Socket",
        "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fa945e77-3467-41b9-ac7e-44ab9232de32",
            "title": "Log",
            "fullFile": "/home/nathan/Documents/workspace/hisab/backend/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully receive streamed request logs.",
                "fullTitle": "Socket Log Should successfully receive streamed request logs.",
                "timedOut": false,
                "duration": 1038,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let socketURL = `http://0.0.0.0:${process.env.HTTP_PORT}`;\nlet options = {\n    transports: ['websocket'],\n    'force new connection': true\n};\n(()=>{\n    let execRequests = [];\n    for(let i=0; i<1; i++){\n        execRequests.push(function (callback) {\n            setTimeout(function () {\n                let deniedMethodOnObject = {\n                    service     : \"Service A\",\n                        ip          : \"172.16.1.41\",\n                        params      : null,\n                        path        : \"http://sample/route\",\n                        query       : null,\n                        secure      : true,\n                        xhr         : false,\n                        route       : \"http://sample/route\",\n                        method      : \"PUT\",\n                        body        : {sampleKey : \"sampleVal\"},\n                        objectId    : \"5cee7a0456f44a4e65b35532\",\n                        token       : \"wrong_token\"\n                };\n                sendRequest(url.token.validate(),'post',deniedMethodOnObject,200,function () {\n                    callback(null);\n                });\n            },500)\n        })\n    }\n    async.waterfall(execRequests);\n})();\nlet client = socketClient.connect(socketURL, options);\nclient.on('logs', function(data){\n    if(data){done();}\n});",
                "err": {},
                "isRoot": false,
                "uuid": "70ea7382-b8e3-4c63-94b5-60d256b2ce96",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "70ea7382-b8e3-4c63-94b5-60d256b2ce96"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1038,
            "root": false,
            "rootEmpty": false,
            "_timeout": 30000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}