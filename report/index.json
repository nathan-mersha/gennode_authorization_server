{
  "stats": {
    "suites": 51,
    "tests": 115,
    "passes": 115,
    "pending": 0,
    "failures": 0,
    "start": "2019-10-25T13:41:02.400Z",
    "end": "2019-10-25T13:41:08.808Z",
    "duration": 6408,
    "testsRegistered": 115,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "10f45ee2-ffb9-45c8-8f5e-3dc18e0e94cc",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "8d882538-dbff-4cca-87f0-faa0e77ed3a1",
        "title": "Token",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "aedc9e5a-d708-457b-8d80-32dde1b113ef",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to create token (Validation error)",
                "fullTitle": "Token Create Should fail to create token (Validation error)",
                "timedOut": false,
                "duration": 387,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.create(),'post',dummyData.token.create.validationError,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4bc117d7-d2a0-4f34-ab69-eb6ae2df919c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully create token",
                "fullTitle": "Token Create Should successfully create token",
                "timedOut": false,
                "duration": 233,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.create(),'post',dummyData.token.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isToken(body, true);\n    dummyData.token.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cadb691a-1dd8-4710-abfa-b902f910e41b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4bc117d7-d2a0-4f34-ab69-eb6ae2df919c",
              "cadb691a-1dd8-4710-abfa-b902f910e41b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 620,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "50a8122a-3e8a-48fe-bd70-fa0269f2238d",
            "title": "Validate",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Token Validate \"before all\" hook",
                "timedOut": false,
                "duration": 370,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "console.log(\"Generating dummy data for tests.\");\nasync.waterfall([\n    requestToken,\n    updateAnyRole, // route to be accessed by all\n    updateAnyACM,\n    createUserRole,\n    createUserACM\n],function () {\n    done();\n});\n/**\n * @name            - Request token\n * @description     - Requests a new token by userId.\n * @param callback  - Callback function (error)\n */\nfunction requestToken(callback) {\n    sendRequest(url.token.create(),'post',{userId : userId},201,function (err,res) {\n        validateToken.allowedToBeAccessedByAny.token = res.body.token;\n        validateToken.allowedToBeAccessedByNone.token = res.body.token;\n        validateToken.allowedToPerformPUTByAny.token = res.body.token;\n        validateToken.deniedToPerformDELETEByAny.token = res.body.token;\n        validateToken.allowedToPerformPUTByUser.token = res.body.token;\n        validateToken.allowedToPerformPUTByUserOnUserRoute.token = res.body.token;\n        validateToken.allowedToPerformMethodDeniedRoute.token = res.body.token;\n        validateToken.deniedMethodOnObject.token = res.body.token;\n        validateToken.allowedToAccessRoute.token = res.body.token;\n        validateToken.notAllowedToAccessRoute.token = res.body.token;\n        validateToken.notAllowedToAccessMethodButRoute.token = res.body.token;\n        callback(null);\n    });\n}\n/**\n * @name            - Update any role\n * @description     - Updates role type 'any' to have access for the routes accessed by all\n * @param callback  - Callback function (error)\n */\nfunction updateAnyRole(callback) {\n    let updateData  = {accessRoutes : [\n            { route : route.accessedByAll, method : \"POST\"},\n            { route : route.accessedByAll, method : \"PUT\"},\n            { route : route.accessedByAll, method : \"GET\"}\n            ]};\n    sendRequest(url.role.update(\"name=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){callback(null);}\n    });\n}\n/**\n * @name            - Update any acm\n * @description     - Updates any acm role\n * @param callback  - Callback function (error)\n */\nfunction updateAnyACM(callback) {\n    let updateData = {\n        accessControl : {\n            read    : [performPUTOnObjectByAny],\n            update  : [performPUTOnObjectByAny]\n        }\n    };\n    sendRequest(url.acm.update(\"subject=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){callback(null);}\n    });\n}\n/**\n * @name            - Create user role\n * @description     - Create sample role with test user\n * @param callback  - Callback function (error)\n */\nfunction createUserRole(callback) {\n    let sampleRole = {\n        name            : \"Sample Privilege\",\n        description     : \"Sample description for the privilege\",\n        members         : [userId],\n        accessRoutes    : [\n            {route : route.accessedByUser, method : \"PUT\"}\n        ]\n    };\n    sendRequest(url.role.create(),'post',sampleRole,201,function (err,res) {\n        let body = res.body;\n        if(body._id){callback(null);}\n    });\n}\n/**\n * @name            - Create user acm\n * @description     - Creates custom user acm data.\n * @param callback  - Callback function (error)\n */\nfunction createUserACM(callback) {\n    let userACMData = {\n        subject : userId,\n        accessControl : {\n            update : [performPUTOnObjectByUser]\n        }\n    };\n    sendRequest(url.acm.create(),'post',userACMData,200,function (err,res) {\n        let body = res.body;\n        if(body._id){callback(null);}\n    });\n}",
                "err": {},
                "isRoot": false,
                "uuid": "715ec00a-7398-4a76-9a03-2ce50b750227",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Token Validate \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "// Roll back\nasync.waterfall([\n    removedAnyRoleUpdate,\n    removeAnyACMUpdate,\n    removeUserRole,\n    removeUserACM\n],function () {\n    console.log(\"Rollback completed.\")\n});\nfunction removedAnyRoleUpdate(cb) {\n    let updateData  = {accessRoutes : []};\n    sendRequest(url.role.update(\"name=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){cb(null);}\n    });\n}\nfunction removeAnyACMUpdate(cb) {\n    let updateData = {\n        accessControl : {\n            read    : [],\n            update  : []\n        }\n    };\n    sendRequest(url.acm.update(\"subject=any\"),'put',updateData,200,function (err,res) {\n        let body = res.body;\n        if(body.ok){cb(null);}\n    });\n}\nfunction removeUserRole(cb) {\n    let userRoleQuery = \"name=Sample Privilege\";\n    sendRequest(url.role.remove(userRoleQuery),'delete',null, 200, function (err, res) {\n        if(res.body.ok){cb(null);}\n    });\n}\nfunction removeUserACM(cb) {\n    let userACMQuery = `subject=${userId}`;\n    sendRequest(url.acm.remove(userACMQuery),'delete',null, 200, function (err, res) {\n        if(res.body.ok){cb(null);}\n    });\n}",
                "err": {},
                "isRoot": false,
                "uuid": "877efb05-d9f0-4e35-86d7-8f5d190ec42f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should fail to grant access (Body missing required fields)",
                "fullTitle": "Token Validate Should fail to grant access (Body missing required fields)",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.missingRequiredFields,400,function (err,res) {\n    let body = res.body;\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode); // Validation error\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7fc0cc37-5ef5-4a72-92f0-3827ad0f14d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (Route is allowed to be accessed by anyone)",
                "fullTitle": "Token Validate Should successfully grant access (Route is allowed to be accessed by anyone)",
                "timedOut": false,
                "duration": 137,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToBeAccessedByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9eeab1e6-bea5-479b-a390-abf3225431b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (Token has expired)",
                "fullTitle": "Token Validate Should fail to grant access (Token has expired)",
                "timedOut": false,
                "duration": 2075,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let tokenExpirationTimeCopy = process.env.TOKEN_EXPIRATION_TIME;\nprocess.env.TOKEN_EXPIRATION_TIME = \"1000\"; // Change token expiration time to one second.\nasync.waterfall([\n    createAToken,\n    validateExpToken,\n    rollBackExpirationTime\n],function () {\n    done();\n});\n/**\n * @name            - Create token\n * @description     - Creates a new token for user by 1sec expiration time\n * @param cb        - Callback function (error, response)\n */\nfunction createAToken(cb) {\n    sendRequest(url.token.create(),'post',{userId : userId},201,function (err,res) { // Create token\n        cb(null, res);\n    });\n}\n/**\n * @name            - Validate Exp token\n * @description     - Validation an expired token after 2sec (1 sec safe threshold)\n * @param res       - Token data response object\n * @param cb        - Callback function (error)\n */\nfunction validateExpToken(res, cb) {\n    validateToken.toExpireAfterOneSec.token = res.body.token;\n    setTimeout(function () {\n        sendRequest(url.token.validate(),'post',validateToken.toExpireAfterOneSec,401,function (err,res) {\n            let body = res.body;\n            expect(body.message).to.equal(message.ACCESS_DENIED);\n            cb(null);\n        });\n    },2000);\n}\n/**\n * @name            - Roll back expiration time\n * @description     - Rolls back expiration time to whatever was set on the process env before the test.\n * @param cb        - Callback function (error)\n */\nfunction rollBackExpirationTime(cb) {\n    process.env.TOKEN_EXPIRATION_TIME = tokenExpirationTimeCopy;\n    cb(null);\n}",
                "err": {},
                "isRoot": false,
                "uuid": "7f413891-a4f5-49af-891f-31b92922dacb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (Group 'any' is allowed to perform operation on object)",
                "fullTitle": "Token Validate Should successfully grant access (Group 'any' is allowed to perform operation on object)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0fc406db-b6ee-4ad5-96a6-68d650b7e72e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully deny access (Group 'any' is not allowed to perform operation on object)",
                "fullTitle": "Token Validate Should successfully deny access (Group 'any' is not allowed to perform operation on object)",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.deniedToPerformDELETEByAny,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f1044773-afd6-48c2-b1db-39a210c12cef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to perform method on object, with all access of route)",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to perform method on object, with all access of route)",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByUser,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3b82af80-d4c6-477f-8f66-e2eb24b502a7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to perform method on object, with only user access route)",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to perform method on object, with only user access route)",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformPUTByUserOnUserRoute,200,function (err,res) {\n                        let body = res.body;\n                        expect(body.message).to.equal(message.ACCESS_GRANTED);\n                        done();\n                    });",
                "err": {},
                "isRoot": false,
                "uuid": "39caf330-8399-45e4-b11f-f622d0d77e7c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully grant access (User is allowed to access route+method, no object access (RUD) is requested )",
                "fullTitle": "Token Validate Should successfully grant access (User is allowed to access route+method, no object access (RUD) is requested )",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToAccessRoute,200,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_GRANTED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e05daf8f-7a14-4a6b-8921-010e410fcbf4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User is not allowed to access route+method) ",
                "fullTitle": "Token Validate Should fail to grant access (User is not allowed to access route+method) ",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.notAllowedToAccessRoute,400,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5c3c30e8-c5ef-47f5-bb65-45592c0a28ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User is not allowed to access method but route)",
                "fullTitle": "Token Validate Should fail to grant access (User is not allowed to access method but route)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.notAllowedToAccessMethodButRoute,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a544e05c-6bc5-471b-9af0-97b9ea419e6f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User allowed to perform method on object and denied route.)",
                "fullTitle": "Token Validate Should fail to grant access (User allowed to perform method on object and denied route.)",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.allowedToPerformMethodDeniedRoute,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2ffacb5d-d886-4057-be90-cc307b33d58c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to grant access (User or 'any' group is denied to perform method on object)",
                "fullTitle": "Token Validate Should fail to grant access (User or 'any' group is denied to perform method on object)",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.token.validate(),'post',validateToken.deniedMethodOnObject,401,function (err,res) {\n    let body = res.body;\n    expect(body.message).to.equal(message.ACCESS_DENIED);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "aa0a3ba5-198e-4c42-a8ad-d1040d7efed6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7fc0cc37-5ef5-4a72-92f0-3827ad0f14d3",
              "9eeab1e6-bea5-479b-a390-abf3225431b5",
              "7f413891-a4f5-49af-891f-31b92922dacb",
              "0fc406db-b6ee-4ad5-96a6-68d650b7e72e",
              "f1044773-afd6-48c2-b1db-39a210c12cef",
              "3b82af80-d4c6-477f-8f66-e2eb24b502a7",
              "39caf330-8399-45e4-b11f-f622d0d77e7c",
              "e05daf8f-7a14-4a6b-8921-010e410fcbf4",
              "5c3c30e8-c5ef-47f5-bb65-45592c0a28ae",
              "a544e05c-6bc5-471b-9af0-97b9ea419e6f",
              "2ffacb5d-d886-4057-be90-cc307b33d58c",
              "aa0a3ba5-198e-4c42-a8ad-d1040d7efed6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2446,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fe09f88b-532f-4649-b727-52a5f1d8ae89",
        "title": "Service",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c89ca387-f10f-48e5-965c-8055b86fe30e",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create service",
                "fullTitle": "Service Create Should successfully create service",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body, true);\n    dummyData.service.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0e285b00-2ade-412a-bbb7-a2eaf25c99c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create service (Method and route fields missing)",
                "fullTitle": "Service Create Should fail to create service (Method and route fields missing)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e992e14f-3053-4b4e-8135-a6d7108bf95a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create service (Method is not http method)",
                "fullTitle": "Service Create Should fail to create service (Method is not http method)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "88f20c03-2675-4a11-918a-bb38fed9a48c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0e285b00-2ade-412a-bbb7-a2eaf25c99c2",
              "e992e14f-3053-4b4e-8135-a6d7108bf95a",
              "88f20c03-2675-4a11-918a-bb38fed9a48c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 38,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e22f910b-8842-4b91-a8ff-2fcce7da844c",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve service data (public)",
                "fullTitle": "Service Find Should successfully retrieve service data (public)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPublic(dummyData.service.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.service.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0d7ee188-6396-469d-8f19-0c03a8dfea53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve service data (private)",
                "fullTitle": "Service Find Should successfully retrieve service data (private)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPrivate(dummyData.service.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.service.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4e8822a0-7335-4d92-a27d-d8d7a32ced3c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve service data ( Id wrong format )",
                "fullTitle": "Service Find Should fail to retrieve service data ( Id wrong format )",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findByIdPublic(dummyData.service.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c6b753ae-4aeb-4b5e-a9e0-898cd6d83934",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0d7ee188-6396-469d-8f19-0c03a8dfea53",
              "4e8822a0-7335-4d92-a27d-d8d7a32ced3c",
              "c6b753ae-4aeb-4b5e-a9e0-898cd6d83934"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "71cdd024-e73f-4e45-9b06-f210c6c9feb8",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve service paginated data",
                "fullTitle": "Service Find paginated Should successfully retrieve service paginated data",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3a5dd4db-0acb-44dc-8229-00499ed2a99a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3a5dd4db-0acb-44dc-8229-00499ed2a99a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a3e05b2d-7867-4149-a3e9-c74af566461f",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Service Count Should successfully return a count value",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "712c9b1f-37dd-4892-8926-f58ec2b93ed1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "712c9b1f-37dd-4892-8926-f58ec2b93ed1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3a726fd8-31b9-4658-8c0a-c878b09eb572",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Service Update \"before all\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.service.create(),'post',dummyData.service.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body, true);\n    serviceData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d902e8ff-1bd0-4895-8693-106dd2e12b1b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Service Update \"after all\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}`;\nsendRequest(url.service.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "18187b84-17dd-4732-874b-d4db3a194765",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update service data",
                "fullTitle": "Service Update Should successfully update service data",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.update(query),'put',dummyData.service.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f2f61566-3734-44a7-9f6c-3451abab109f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "Service Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.service.update(query),'put',dummyData.service.update.success,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ee3055cf-268c-464c-84a7-3c1353964433",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update service data (Invalid update data)",
                "fullTitle": "Service Update Should fail to update service data (Invalid update data)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.update(query),'put',dummyData.service.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a4b4f0bc-98c2-4b3a-9988-9b93057bf209",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Service Update Should successfully push items to target",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).excluding('_id').to.include(... update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b307fc78-6376-41a1-b343-4931706b3df7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Service Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).excluding('_id').to.include(...update.success.data);\n    let responseArray = body.routes;\n    helper.removeChildFromParent(responseArray, update.success.data);\n    expect(responseArray).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cbba8aff-4566-406b-8525-20024a75a626",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Service Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3a234ace-e7b9-4839-a0e8-a9ef10913013",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Service Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isService(body);\n    expect(body.routes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "49105226-0112-455f-b280-c0e4a4d809a2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Service Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=notFound&operation=push`;\nsendRequest(url.service.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e6f66421-7cc6-4349-b15a-cc559f1dc840",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Service Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=notFound&operation=pull`;\nsendRequest(url.service.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5dc4db3c-d6bc-4714-8522-f815ac87b7de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Service Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${serviceData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.service.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fe417b2a-cc0d-4483-ae57-380d9ee39277",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f2f61566-3734-44a7-9f6c-3451abab109f",
              "ee3055cf-268c-464c-84a7-3c1353964433",
              "a4b4f0bc-98c2-4b3a-9988-9b93057bf209",
              "b307fc78-6376-41a1-b343-4931706b3df7",
              "cbba8aff-4566-406b-8525-20024a75a626",
              "3a234ace-e7b9-4839-a0e8-a9ef10913013",
              "49105226-0112-455f-b280-c0e4a4d809a2",
              "e6f66421-7cc6-4349-b15a-cc559f1dc840",
              "5dc4db3c-d6bc-4714-8522-f815ac87b7de",
              "fe417b2a-cc0d-4483-ae57-380d9ee39277"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 113,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9fcd7992-05c7-4fbd-aafe-4460254bfbf6",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove service data",
                "fullTitle": "Service Remove Should successfully remove service data",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.service.get.success._id}`;\nsendRequest(url.service.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "95e1da7c-227b-4134-b256-17fc10d190d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove service data. (Query not provided)",
                "fullTitle": "Service Remove Should fail to remove service data. (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.service.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "eff88e73-9293-4eed-bdd7-97d721871680",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "95e1da7c-227b-4134-b256-17fc10d190d2",
              "eff88e73-9293-4eed-bdd7-97d721871680"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fc26b9a4-bbe2-4667-8cc7-570a250923e7",
        "title": "User",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dff13762-ee82-4fbc-8c6a-189b96786fef",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create user",
                "fullTitle": "User Create Should successfully create user",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.create(),'post',dummyData.user.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUser(body, true);\n    dummyData.user.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7f67ec26-a94d-4386-9038-524f96e14939",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create user (Required field missing)",
                "fullTitle": "User Create Should fail to create user (Required field missing)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.create(),'post',dummyData.user.create.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "964cfc12-cff9-40b3-817e-71ce624246ff",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7f67ec26-a94d-4386-9038-524f96e14939",
              "964cfc12-cff9-40b3-817e-71ce624246ff"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b4c4842c-ed37-43d1-b853-ac2de56174f0",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user data (public)",
                "fullTitle": "User Find Should successfully retrieve user data (public)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPublic(dummyData.user.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.user.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5cac3cce-5d3d-4b6e-af0e-9246c9f5321f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve user data (private)",
                "fullTitle": "User Find Should successfully retrieve user data (private)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPrivate(dummyData.user.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.user.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a4b289d2-dd59-4a75-8e31-be827f24b506",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve user data ( Id wrong format )",
                "fullTitle": "User Find Should fail to retrieve user data ( Id wrong format )",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findByIdPublic(dummyData.user.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "75540d29-007c-4fad-b234-ee7e061d07c5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5cac3cce-5d3d-4b6e-af0e-9246c9f5321f",
              "a4b289d2-dd59-4a75-8e31-be827f24b506",
              "75540d29-007c-4fad-b234-ee7e061d07c5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c1ae2ede-7529-4152-a41c-574084051ee7",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user paginated data",
                "fullTitle": "User Find paginated Should successfully retrieve user paginated data",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b777013e-421c-42b4-90d8-7d0f787f436a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b777013e-421c-42b4-90d8-7d0f787f436a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f1f181b6-8fae-4d11-9ac1-8af345f906c8",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "User Count Should successfully return a count value",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.user.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e51a810d-2bf3-45d7-8bb8-7be945a44c05",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e51a810d-2bf3-45d7-8bb8-7be945a44c05"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9e273785-5a01-472b-9268-54e4e427e30d",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update user data",
                "fullTitle": "User Update Should successfully update user data",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.update(query),'put',dummyData.user.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "450a9daa-a658-40d0-92e1-1042b814a8cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "User Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.user.update(query),'put',dummyData.user.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "21146ef6-92a7-4dfb-ba49-0bce76f2d514",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update user data (Invalid update data)",
                "fullTitle": "User Update Should fail to update user data (Invalid update data)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.update(query),'put',dummyData.user.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8c9dc891-98f0-40c8-91a1-1b482a311abc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "450a9daa-a658-40d0-92e1-1042b814a8cb",
              "21146ef6-92a7-4dfb-ba49-0bce76f2d514",
              "8c9dc891-98f0-40c8-91a1-1b482a311abc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0b75bfed-0b7a-401c-bc03-966413523090",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove user data",
                "fullTitle": "User Remove Should successfully remove user data",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.user.get.success._id}`;\nsendRequest(url.user.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3fdab7ae-1d8c-4c0b-8aec-19261566aa8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove user data. (Query not provided)",
                "fullTitle": "User Remove Should fail to remove user data. (Query not provided)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.user.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "12b5f659-f016-42af-819d-09c4de25b123",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3fdab7ae-1d8c-4c0b-8aec-19261566aa8c",
              "12b5f659-f016-42af-819d-09c4de25b123"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "67b6ddfa-c3eb-4db1-abcb-2cd8d76055a7",
        "title": "Role",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "58207b23-e68f-4860-8aab-5e2e1f589536",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create role",
                "fullTitle": "Role Create Should successfully create role",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    dummyData.role.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ab22efec-8e41-4505-aea2-1f4d9b9bd5bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create role (Required field missing)",
                "fullTitle": "Role Create Should fail to create role (Required field missing)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.missingRequiredFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7fbff7c1-60e4-4c1f-b079-4730e54ebddf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create route (Unknown Http method)",
                "fullTitle": "Role Create Should fail to create route (Unknown Http method)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.invalidMethod,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body, true);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "628bfece-ce3d-4236-a21a-dba83fd9854c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ab22efec-8e41-4505-aea2-1f4d9b9bd5bb",
              "7fbff7c1-60e4-4c1f-b079-4730e54ebddf",
              "628bfece-ce3d-4236-a21a-dba83fd9854c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 23,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d924bee5-d62b-4699-8b75-fb4c5f7d28fc",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve role data (public)",
                "fullTitle": "Role Find Should successfully retrieve role data (public)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPublic(dummyData.role.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.role.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0987abe2-94ed-4397-8e4e-b0aad0745cca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve role data (private)",
                "fullTitle": "Role Find Should successfully retrieve role data (private)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPrivate(dummyData.role.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.role.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "317fb95f-e823-47b7-b01d-084414992d23",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve role data ( Id wrong format )",
                "fullTitle": "Role Find Should fail to retrieve role data ( Id wrong format )",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findByIdPublic(dummyData.role.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1c7ed113-dbec-420e-aad2-4b2301644161",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0987abe2-94ed-4397-8e4e-b0aad0745cca",
              "317fb95f-e823-47b7-b01d-084414992d23",
              "1c7ed113-dbec-420e-aad2-4b2301644161"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9fb54564-7929-43f5-b4bc-7b86618be4b1",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve role paginated data",
                "fullTitle": "Role Find paginated Should successfully retrieve role paginated data",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b5dfaa68-7653-4ef2-9ef7-f285ac678ca9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b5dfaa68-7653-4ef2-9ef7-f285ac678ca9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 23,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9c7f7df1-f121-4fa4-a4d7-6986b3c6d076",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Role Count Should successfully return a count value",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9da37aed-bf7a-47ac-bc40-6b44a443e133",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9da37aed-bf7a-47ac-bc40-6b44a443e133"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bcdf65ad-c4d7-4530-96d1-5f05977dcdb3",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Role Update \"before all\" hook",
                "timedOut": false,
                "duration": 14,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    roleData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f43e57ae-27e4-43ff-97b9-49dd64ab27c3",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Role Update \"after all\" hook",
                "timedOut": false,
                "duration": 4,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}`;\nsendRequest(url.role.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "97c6911c-fe26-4e49-a89f-4fbf4e316aaa",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update role data",
                "fullTitle": "Role Update Should successfully update role data",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.update(query),'put',dummyData.role.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body); \n    expect(body.nModified).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "be39a10e-aa5c-44bd-9118-e494c6e71036",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update role data (Query not provided)",
                "fullTitle": "Role Update Should fail to update role data (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.role.update(query),'put',dummyData.role.update.success,400,function (err,res) {\n    let body = res.body;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b7f9e459-8e4d-4045-968b-8b2f49decf8b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update role data (Invalid update data)",
                "fullTitle": "Role Update Should fail to update role data (Invalid update data)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.update(query),'put',dummyData.role.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0b5215ba-8ed2-43a7-8be7-9daa5a37e548",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Role Update Should successfully push items to target",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    (function () {\n        body.accessRoutes.forEach(function (accessRoute) {\n            delete accessRoute._id;\n        })\n    })();\n    expect(body.accessRoutes).to.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b3eff739-6a23-4da0-8c09-5374d0994ce7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Role Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    (function () {\n        body.accessRoutes.forEach(function (accessRoute) {\n            delete accessRoute._id;\n        })\n    })();\n    expect(body.accessRoutes).to.include(...update.success.data);\n    let responseArray = body.accessRoutes;\n    helper.removeChildFromParent(responseArray, update.success.data);\n    expect(responseArray).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "aac5218b-59b6-4e22-b5e3-3fda389d0469",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Role Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    expect(body.accessRoutes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2f6b33f0-3d66-4c9d-8832-8ef025298997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Role Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body);\n    expect(body.accessRoutes).to.not.include(...update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a1bbc450-c78e-468a-b2c4-bd8002be2eb3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Role Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=notFound&operation=push`;\nsendRequest(url.role.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7c252fd8-64b6-4fd5-8afa-1c9c40f5f671",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Role Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=notFound&operation=pull`;\nsendRequest(url.role.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "585bcc15-b907-46cd-a433-aa1b9ace9e23",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Role Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${roleData._id}&target=${update.success.target}&operation=push`;\nsendRequest(url.role.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "81aac4c2-e95b-4737-91f2-b25a440d0c9e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "be39a10e-aa5c-44bd-9118-e494c6e71036",
              "b7f9e459-8e4d-4045-968b-8b2f49decf8b",
              "0b5215ba-8ed2-43a7-8be7-9daa5a37e548",
              "b3eff739-6a23-4da0-8c09-5374d0994ce7",
              "aac5218b-59b6-4e22-b5e3-3fda389d0469",
              "2f6b33f0-3d66-4c9d-8832-8ef025298997",
              "a1bbc450-c78e-468a-b2c4-bd8002be2eb3",
              "7c252fd8-64b6-4fd5-8afa-1c9c40f5f671",
              "585bcc15-b907-46cd-a433-aa1b9ace9e23",
              "81aac4c2-e95b-4737-91f2-b25a440d0c9e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 84,
            "root": false,
            "rootEmpty": false,
            "_timeout": 15000
          },
          {
            "uuid": "59b692b5-4a78-46f7-ab11-ad8ba7e1b1a2",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove role data",
                "fullTitle": "Role Remove Should successfully remove role data",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.role.get.success._id}`;\nsendRequest(url.role.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.n).to.be.at.least(1); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7835dcea-8545-4768-9650-33d48fed1e86",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove role data (Query not provided)",
                "fullTitle": "Role Remove Should fail to remove role data (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.role.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "61cf6f2b-b152-4909-87df-71e1e4298b80",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7835dcea-8545-4768-9650-33d48fed1e86",
              "61cf6f2b-b152-4909-87df-71e1e4298b80"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "31fccfaa-2680-4664-96a5-482dc9f16ac8",
        "title": "Acm",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1b2ddeff-19cc-43c1-b8e2-469ca8c67364",
            "title": "Create",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully create acm",
                "fullTitle": "Acm Create Should successfully create acm",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true);\n    dummyData.acm.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5f178dcb-0666-43af-8790-086dd87aa3c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully create acm (By Object)",
                "fullTitle": "Acm Create Should successfully create acm (By Object)",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(\"object\"),'post',dummyData.acm.create.successByObject,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true, \"object\");\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b8a6a4fe-c3bc-447c-81eb-9908489254e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create acm (Required field missing)",
                "fullTitle": "Acm Create Should fail to create acm (Required field missing)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "feb3f06c-1cc7-4e4d-aa9a-48f9eb0056fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to create acm (Required field missing, By Object)",
                "fullTitle": "Acm Create Should fail to create acm (Required field missing, By Object)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(\"object\"),'post',dummyData.acm.create.missingFields,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f6f0c430-5ea4-4f5a-87cb-6c662d4f153f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5f178dcb-0666-43af-8790-086dd87aa3c7",
              "b8a6a4fe-c3bc-447c-81eb-9908489254e0",
              "feb3f06c-1cc7-4e4d-aa9a-48f9eb0056fb",
              "f6f0c430-5ea4-4f5a-87cb-6c662d4f153f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 64,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e034afe7-4cd4-4dc2-968c-9a0db7b78707",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve acm data (public)",
                "fullTitle": "Acm Find Should successfully retrieve acm data (public)",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPublic(dummyData.acm.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.acm.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c7776827-4585-4749-b120-1f726ffd3e28",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully retrieve acm data (private)",
                "fullTitle": "Acm Find Should successfully retrieve acm data (private)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPrivate(dummyData.acm.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.acm.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ce965c13-778b-4dcb-9540-40a34f71b1e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve acm data ( Id wrong format )",
                "fullTitle": "Acm Find Should fail to retrieve acm data ( Id wrong format )",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findByIdPublic(dummyData.acm.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d66d9c18-ad0c-4f6f-b956-01f87f5a3257",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c7776827-4585-4749-b120-1f726ffd3e28",
              "ce965c13-778b-4dcb-9540-40a34f71b1e6",
              "d66d9c18-ad0c-4f6f-b956-01f87f5a3257"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3bb399bb-07a3-484b-9eca-5c12abaaefe9",
            "title": "Find paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve acm paginated data",
                "fullTitle": "Acm Find paginated Should successfully retrieve acm paginated data",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body); \n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7bce62b4-e900-4ed8-b931-5f77275b0446",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7bce62b4-e900-4ed8-b931-5f77275b0446"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "45fd9c92-4d08-421d-9a79-2c40483a2672",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Acm Count Should successfully return a count value",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "54d40552-e328-4f50-a83c-50a6e0a711b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "54d40552-e328-4f50-a83c-50a6e0a711b3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "107c9d7a-d103-4ad5-ac4d-40e50ba2c0bb",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Acm Update \"before all\" hook",
                "timedOut": false,
                "duration": 18,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.acm.create(),'post',dummyData.acm.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body, true);\n    acmData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c59edba1-0ac6-4c45-bdb2-af5b4898e838",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Acm Update \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}`;\nsendRequest(url.acm.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7153683f-431b-4bbc-a244-8eb8299fc0fd",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should successfully update acm data",
                "fullTitle": "Acm Update Should successfully update acm data",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body);\n    expect(body.nModified).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "563f7146-1bb4-4329-8d0b-ae0a3fc81dd8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update acm data (Query not provided)",
                "fullTitle": "Acm Update Should fail to update acm data (Query not provided)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bb955f26-3245-474d-98d0-356e3acecf11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update acm data (Invalid update data)",
                "fullTitle": "Acm Update Should fail to update acm data (Invalid update data)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.update(query),'put',dummyData.acm.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ad9c5913-6a3c-46ec-9014-952b07f718e4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully push items to target",
                "fullTitle": "Acm Update Should successfully push items to target",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3cb9d210-fb46-497c-a877-e19397d5f38f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Items already exist)",
                "fullTitle": "Acm Update Should fail to push items (Items already exist)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.include.members(update.success.data);\n    let responseArray = body.accessControl.read;\n    delete responseArray[responseArray.indexOf(update.success.data[0])];\n    delete responseArray[responseArray.indexOf(update.success.data[1])];\n    expect(responseArray).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fff022c9-f288-427f-83af-4079dc20460b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully pull items from target",
                "fullTitle": "Acm Update Should successfully pull items from target",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0412bb9c-84ea-411d-8c46-d6df1ef56e41",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Items don't exist)",
                "fullTitle": "Acm Update Should fail to pull items (Items don't exist)",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAcm(body);\n    expect(body.accessControl.read).to.not.include.members(update.success.data);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b1506e2a-09af-4cda-aa92-c69c2d68cffb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to push items (Target object not found)",
                "fullTitle": "Acm Update Should fail to push items (Target object not found)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.notFound&operation=push`;\nsendRequest(url.acm.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "463d9c60-dd24-45cd-829f-4629bdc4a204",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to pull items (Target object not found)",
                "fullTitle": "Acm Update Should fail to pull items (Target object not found)",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.notFound&operation=pull`;\nsendRequest(url.acm.update(query),'put',update.success.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "73e1b24f-0e0f-4a9a-9e96-eb3b4afdf0c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to perform operation on target (Body is not an array)",
                "fullTitle": "Acm Update Should fail to perform operation on target (Body is not an array)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${acmData._id}&target=accessControl.read&operation=push`;\nsendRequest(url.acm.update(query),'put',update.invalid.data,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f2f8ed1a-a0e1-47b1-ba49-916512831145",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "563f7146-1bb4-4329-8d0b-ae0a3fc81dd8",
              "bb955f26-3245-474d-98d0-356e3acecf11",
              "ad9c5913-6a3c-46ec-9014-952b07f718e4",
              "3cb9d210-fb46-497c-a877-e19397d5f38f",
              "fff022c9-f288-427f-83af-4079dc20460b",
              "0412bb9c-84ea-411d-8c46-d6df1ef56e41",
              "b1506e2a-09af-4cda-aa92-c69c2d68cffb",
              "463d9c60-dd24-45cd-829f-4629bdc4a204",
              "73e1b24f-0e0f-4a9a-9e96-eb3b4afdf0c3",
              "f2f8ed1a-a0e1-47b1-ba49-916512831145"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 73,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9fe1f7c5-24d3-4323-87cd-9e92bee2fe1a",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove acm data",
                "fullTitle": "Acm Remove Should successfully remove acm data",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.acm.get.success._id}`;\nsendRequest(url.acm.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body); \n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "30155b18-5647-4eea-9673-392572b082dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove acm data (Query not provide)",
                "fullTitle": "Acm Remove Should fail to remove acm data (Query not provide)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.acm.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "02ad55c5-8b45-4405-9fee-8e46dd6cf35b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "30155b18-5647-4eea-9673-392572b082dd",
              "02ad55c5-8b45-4405-9fee-8e46dd6cf35b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5438dbe2-6993-47a6-8836-b7b4581b99c1",
        "title": "Admin",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "906db1d3-b8c3-4cad-bd77-c33f6b88b6c6",
            "title": "SignUp",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully signup Admin",
                "fullTitle": "Admin SignUp Should successfully signup Admin",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.signup(),'post',adminSignUp,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isAdmin(body, true);\n    dummyData.admin.get.success = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "92c58d07-59ae-4525-a9a6-84eeee50a82c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to signup (Validate error)",
                "fullTitle": "Admin SignUp Should fail to signup (Validate error)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.signup(),'post',dummyData.admin.signup.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "50a31801-d80a-4e6b-847e-999fabf2b939",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to signup (UserName exists)",
                "fullTitle": "Admin SignUp Should fail to signup (UserName exists)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Fails because the exact test have been done before.\nsendRequest(url.admin.signup(),'post',dummyData.admin.signup.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.AUT.USERNAME_EXISTS.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e5e7ba6f-e56b-4a42-ac35-94812b135256",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "92c58d07-59ae-4525-a9a6-84eeee50a82c",
              "50a31801-d80a-4e6b-847e-999fabf2b939",
              "e5e7ba6f-e56b-4a42-ac35-94812b135256"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 79,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c925de75-cf84-4c24-9d37-d93f626b03f6",
            "title": "Login",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to login (Wrong credential)",
                "fullTitle": "Admin Login Should fail to login (Wrong credential)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',dummyData.admin.signup.wrongCredential,401,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.AUT.UNAUTHORIZED_ACCESS.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "410a6f67-7a8f-4d0a-b6b6-83e8afc9cf02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to login (Missing fields)",
                "fullTitle": "Admin Login Should fail to login (Missing fields)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',dummyData.admin.signup.validationError,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "98e6cc8a-c3e5-4027-8f87-78a8a7c5622a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully login Admin",
                "fullTitle": "Admin Login Should successfully login Admin",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.login(),'post',adminSignUp,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('token');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dc96cdd6-bbbc-49b5-8ce7-8a68db27e442",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "410a6f67-7a8f-4d0a-b6b6-83e8afc9cf02",
              "98e6cc8a-c3e5-4027-8f87-78a8a7c5622a",
              "dc96cdd6-bbbc-49b5-8ce7-8a68db27e442"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 52,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ee68eb18-5f8b-470c-9e3d-4c5272424102",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Admin Count Should successfully return a count value",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2bd4c11c-4c56-4f50-be77-ed5ebc771c25",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2bd4c11c-4c56-4f50-be77-ed5ebc771c25"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8b21275c-8826-4af1-84ff-ae599346e3f2",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin data",
                "fullTitle": "Admin Find Should successfully retrieve admin data",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findByIdPrivate(dummyData.admin.get.success._id),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body._id).to.equal(dummyData.admin.get.success._id);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fcc69310-e2be-4b87-b338-428fec41a81a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to retrieve admin data ( Id wrong format )",
                "fullTitle": "Admin Find Should fail to retrieve admin data ( Id wrong format )",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findByIdPrivate(dummyData.admin.get.wrongIdFormat),'get',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fe1815b3-6e83-46ed-9640-334e98e22145",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fcc69310-e2be-4b87-b338-428fec41a81a",
              "fe1815b3-6e83-46ed-9640-334e98e22145"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3f666c12-3aa5-4927-864a-c8f12b140758",
            "title": "Find Paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin paginated data",
                "fullTitle": "Admin Find Paginated Should successfully retrieve admin paginated data",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.admin.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c903f338-6d47-4f69-b8da-963c732a29ae",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c903f338-6d47-4f69-b8da-963c732a29ae"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "83d64757-b534-4983-97d3-e5192002389a",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully update admin data",
                "fullTitle": "Admin Update Should successfully update admin data",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.success,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isUpdateResponse(body);\n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9e64de82-fc6c-4e83-aeab-3065dddcdaed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update data. (Query not provided)",
                "fullTitle": "Admin Update Should fail to update data. (Query not provided)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.success,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "84df9b0c-e583-4425-9c77-0710cf68309f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update admin data (Invalid update data)",
                "fullTitle": "Admin Update Should fail to update admin data (Invalid update data)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.update(query),'put',dummyData.admin.update.invalidData,400,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.IMPROPER_DATA.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7ee51f54-c5f4-4bf6-a1b9-854692d8cd0a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9e64de82-fc6c-4e83-aeab-3065dddcdaed",
              "84df9b0c-e583-4425-9c77-0710cf68309f",
              "7ee51f54-c5f4-4bf6-a1b9-854692d8cd0a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7000079a-4414-497f-b100-0a2b4fcea241",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove admin data",
                "fullTitle": "Admin Remove Should successfully remove admin data",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `_id=${dummyData.admin.get.success._id}`;\nsendRequest(url.admin.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.n).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "aaf878be-f043-4ad3-8680-c73fea93a097",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to remove admin data. (Query not provided)",
                "fullTitle": "Admin Remove Should fail to remove admin data. (Query not provided)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = ``;\nsendRequest(url.admin.remove(query),'del',null,400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6098cc5b-872b-4c02-824a-f3b1b6142878",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "aaf878be-f043-4ad3-8680-c73fea93a097",
              "6098cc5b-872b-4c02-824a-f3b1b6142878"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a80df959-a80b-4626-b4a9-71bf0bfcf1dc",
        "title": "Log",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cbf7498f-56d0-42b1-a20d-23d837353523",
            "title": "Status",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve server's overall status",
                "fullTitle": "Log Status Should successfully retrieve server's overall status",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.status(),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"memoryUsage\", \"cpuUsage\", \"upTime\"]);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a4775f29-f7bd-4585-a5d1-4144d5c22668",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a4775f29-f7bd-4585-a5d1-4144d5c22668"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "81d25f66-bd3e-4340-8f01-c4b083235c30",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve log data",
                "fullTitle": "Log Find Should successfully retrieve log data",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.get(),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"info\"]);\n    expect(body.info).to.be.an('array');\n    expect(body.info).length.to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0b2981df-e709-43fd-997c-50db5cace04a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0b2981df-e709-43fd-997c-50db5cace04a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4b5e3834-56c1-4c0a-859f-1d20677efdc7",
            "title": "Flush",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully flush log data",
                "fullTitle": "Log Flush Should successfully flush log data",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.log.flush(),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(body).to.be.an('object').that.has.all.keys([\"message\"]);\n    expect(body.message).to.equal(\"Logs flushed\");\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "184a958b-0039-40a9-8bc9-055489cc909f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "184a958b-0039-40a9-8bc9-055489cc909f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f5b75583-5f73-4a80-b958-7fe2845a83c6",
        "title": "Schema",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3e1ca4b0-2608-4d0c-a38c-88159da74645",
            "title": "Count",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully return a count value",
                "fullTitle": "Schema Count Should successfully return a count value",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.schema.count(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    expect(body).to.be.an('object').that.includes.all.keys('count');\n    expect(body.count).to.be.a('number');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d4c0200c-1b74-4671-9d88-87279e8c5737",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d4c0200c-1b74-4671-9d88-87279e8c5737"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "de69420c-1585-482b-81e3-4e445e834f77",
            "title": "Find",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve user data (public)",
                "fullTitle": "Schema Find Should successfully retrieve user data (public)",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `schemaName=${dummyData.acm.create.successByObject.schemaName}`;\nsendRequest(url.schema.findPaginated(query),'get',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    let sampleSchema = body.docs[0];\n    isSchema(sampleSchema);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "972767ae-f01e-4af6-ab79-8b5ebc24604b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "972767ae-f01e-4af6-ab79-8b5ebc24604b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1aa2a358-1437-4902-99dc-7a0693cb5021",
            "title": "Find Paginated",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully retrieve admin paginated data",
                "fullTitle": "Schema Find Paginated Should successfully retrieve admin paginated data",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.schema.findPaginated(),'get',null,200,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isPaginatedResponse(body);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cd802505-f072-41f9-a9ba-74adef1225d0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cd802505-f072-41f9-a9ba-74adef1225d0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9f34443c-e873-49cd-8680-ac24d00659ff",
            "title": "Update",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Schema Update \"before all\" hook",
                "timedOut": false,
                "duration": 12,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sendRequest(url.role.create(),'post',dummyData.role.create.success,201,function (err,res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRole(body, true);\n    roleData = body;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ceb89687-0e9d-4bf1-80d1-63dbd5efa488",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should fail to update Schema (Schema does not exist)",
                "fullTitle": "Schema Update Should fail to update Schema (Schema does not exist)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"push\";\nlet query = `schemaName=noneExistent&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.NO_DATA_FOUND.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "85a1678d-579a-4d90-a2b8-abbd99e86dd0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update Schema (Target not defined) ",
                "fullTitle": "Schema Update Should fail to update Schema (Target not defined) ",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5774f510-9543-4c64-817e-fb5e908db366",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should fail to update Schema (Operation not defined)",
                "fullTitle": "Schema Update Should fail to update Schema (Operation not defined)",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],400,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isErrorResponse(body);\n    expect(body.errorCode).to.equal(errorCodes.SEC.VALIDATION_ERROR.errorCode);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8a7048a0-3e8c-417e-ac9c-33982b110b27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully add a new role to a method",
                "fullTitle": "Schema Update Should successfully add a new role to a method",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"push\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isSchema(body, false);\n    expect(body.accessControl.read).to.contain(roleData.name);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "62562963-c68a-446e-afaf-672f1554d525",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should successfully remove a role from a method",
                "fullTitle": "Schema Update Should successfully remove a role from a method",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let target = \"accessControl.read\",\n    operation = \"pull\";\nlet query = `schemaName=${dummyData.acm.create.successByObject.schemaName}&target=${target}&operation=${operation}`;\nsendRequest(url.schema.update(query),'put',[roleData.name],200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isSchema(body, false);\n    expect(body.accessControl.read).to.not.contain(roleData.name);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b1bbf106-6a4c-4b3e-aa2e-facff36b6ab6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "85a1678d-579a-4d90-a2b8-abbd99e86dd0",
              "5774f510-9543-4c64-817e-fb5e908db366",
              "8a7048a0-3e8c-417e-ac9c-33982b110b27",
              "62562963-c68a-446e-afaf-672f1554d525",
              "b1bbf106-6a4c-4b3e-aa2e-facff36b6ab6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 56,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3b542d91-bc52-40c5-aed2-6eb2f6ec0171",
            "title": "Remove",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully remove Schema",
                "fullTitle": "Schema Remove Should successfully remove Schema",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let query = `schemaName=${dummyData.acm.create.successByObject.schemaName}`;\nsendRequest(url.schema.remove(query),'del',null,200,function (err, res) {\n    let body = res.body;\n    expect(err).to.be.null;\n    isRemoveResponse(body);\n    expect(body.ok).to.be.at.least(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3bc393b1-336a-46b3-b84d-140cd283d05a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3bc393b1-336a-46b3-b84d-140cd283d05a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "abdafd04-c570-46cb-8255-ea4cd074f1ec",
        "title": "Socket",
        "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3d42beb6-9473-47e5-af56-6a50c53e96c5",
            "title": "Log",
            "fullFile": "/home/nathan/Documents/workspace/be/hisab/hisab_authorization_service/test/test.js",
            "file": "/test/test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should successfully receive streamed request logs.",
                "fullTitle": "Socket Log Should successfully receive streamed request logs.",
                "timedOut": false,
                "duration": 1062,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let socketURL = `http://0.0.0.0:${process.env.HTTP_PORT}`;\nlet options = {\n    transports: ['websocket'],\n    'force new connection': true\n};\n(()=>{\n    let execRequests = [];\n    for(let i=0; i<1; i++){\n        execRequests.push(function (callback) {\n            setTimeout(function () {\n                let deniedMethodOnObject = {\n                    service     : \"Service A\",\n                        ip          : \"172.16.1.41\",\n                        params      : null,\n                        path        : \"http://sample/route\",\n                        query       : null,\n                        secure      : true,\n                        xhr         : false,\n                        route       : \"http://sample/route\",\n                        method      : \"PUT\",\n                        body        : {sampleKey : \"sampleVal\"},\n                        objectId    : \"5cee7a0456f44a4e65b35532\",\n                        token       : \"wrong_token\"\n                };\n                sendRequest(url.token.validate(),'post',deniedMethodOnObject,200,function () {\n                    callback(null);\n                });\n            },500)\n        })\n    }\n    async.waterfall(execRequests);\n})();\nlet client = socketClient.connect(socketURL, options);\nclient.on('logs', function(data){\n    if(data){done();}\n});",
                "err": {},
                "isRoot": false,
                "uuid": "11fad447-98af-47e0-88f9-ad68e1670ccd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "11fad447-98af-47e0-88f9-ad68e1670ccd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1062,
            "root": false,
            "rootEmpty": false,
            "_timeout": 30000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}